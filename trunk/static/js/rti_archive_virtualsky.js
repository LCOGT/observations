/*
	Virtual Sky v0.3.6
	(c) Stuart Lowe, Las Cumbres Observatory Global Telescope
	A browser planetarium using HTML5's <canvas>. It works in
	Internet Explorer thanks to excanvas.js
	
	USAGE:
	In a window/document load event use:
		planetarium = new VirtualSky({id:'starmapper',projection:'polar'});
		
	OPTIONS (default values in brackets):
		id ('starmap') - The ID for the HTML element where you want the sky inserted
		projection ('polar') - The projection type as 'polar', 'stereo', 'lambert' or 'equirectangular'
		width (500) - Set the width of the sky unless you've set the width of the element
		height (250) - Set the height of the sky unless you've set the height of the element
		planets - either an object containing an array of planets or a JSON file
		magnitude (5) - the magnitude limit of displayed stars
		longitude (53.0) - the longitude of the observer
		latitude (-2.5) - the latitude of the observer
		clock (now) - a Javascript Date() object with the starting date/time
		background ('rgba(0,0,0,0)') - the background colour
		color ('rgb(255,255,255)') - the text colour
		az (180) - an azimuthal offset with 0 = north and 90 = east
		negative (false) - invert the default colours i.e. to black on white
		gradient (true) - reduce the brightness of stars near the horizon
		cardinalpoints (true) - show/hide the N/E/S/W labels
		constellations (false) - show/hide the constellation lines
		constellationlabels (false) - show/hide the constellation labels
		showplanets (true) - show/hide the planets
		showorbits (false) - show/hide the orbits of the planets
		showdate (true) - show/hide the date and time
		showposition (true) - show/hide the latitude/longitude
		ground (false) - show/hide the local ground (for full sky projections)
		keyboard (true) - allow keyboard controls
		mouse (true) - allow mouse controls
		gridlines_az (false) - show/hide the azimuth/elevation grid lines
		gridlines_eq (false) - show/hide the RA/Dec grid lines
		gridstep (30) - the size of the grid step when showing grid lines
		live (false) - update the display in real time
*/

function VirtualSky(input){

	// Variables to check for extra js loading as we can't necessarily trust browsers
	// (I'm looking at you, Chrome) to fire load events in the correct order.
	this.num_js_toload = 0;
	this.num_js_loaded = 0;

	// Voodoo to check if we are in IE and need to use excanvas
	if(/*@cc_on!@*/false){ this.loadJavascript('http://lcogt.net/virtualsky/embed/excanvas.js','head'); }
	// Load jQuery if we don't already have it
	if(typeof jQuery == 'undefined'){ this.loadJavascript('http://lcogt.net/virtualsky/embed/jquery-1.4.2.js','head'); }

	this.id = '';					// The ID of the canvas/div tag - if none given it won't display
	this.gradient = true;				// Show the sky gradient
	this.projection = 'polar';			// Type of projection e.g. 'stereo', 'lambert', 'polar', 'equirectangular'
	this.magnitude = 5;				// Limit for stellar magnitude
	this.background = "rgba(0,0,0,0)";		// Default background colour is transparent
	this.color = "";				// Default background colour is chosen automatically
	this.width = 0;					// Default width if not set in the <canvas> <div> or input argument
	this.height = 0;

	// Set location on the Earth
	this.longitude = -119.86286;
	this.latitude = 34.4326;

	// Toggles
	//this.update = false;
	this.spin = false;
	this.cardinalpoints = true;			// Display N, E, S and W.
	this.constellations = false;		// Draw the constellation lines
	this.constellationlabels = false;	// Display the constellation name labels
	this.negative = false;				// Invert colours to make it better for printing
	this.showplanets = true;			// Display current positions of the planets
	this.showorbits = false;			// Display the orbital paths of the planets
	this.showdate = true;				// Display the current date
	this.showposition = true;				// Display the longitude/latitude
	this.ground = false;
	this.gridlines_az = false;
	this.gridlines_eq = false;
	this.gridstep = 30;
	this.keyboard = true;				// Allow keyboard controls
	this.mouse = true;					// Allow mouse controls
	this.islive = false;				// Update the sky in real time
	this.callback = {geo:'',mouseenter:'',mouseout:''};

	// Data (53 kB for stars)
	this.stars = [[122,4.78,0.3988,-77.07],[154,4.37,0.4901,-6.014],[301,4.55,0.935,-17.34],[355,4.99,1.125,-10.51],[443,4.61,1.334,-5.708],[677,2.07,2.097,29.09],[746,2.28,2.295,59.15],[765,3.88,2.353,-45.75],[910,4.89,2.816,-15.47],[1067,2.83,3.309,15.18],[1168,4.79,3.651,20.21],[1170,4.44,3.66,-18.93],[1366,4.61,4.273,38.68],[1473,4.51,4.582,36.79],[1562,3.56,4.857,-8.824],[1599,4.23,5.018,-64.87],[2021,2.82,6.438,-77.25],[2072,3.93,6.551,-43.68],[2081,2.40,6.571,-42.31],[2210,4.86,6.982,-33.01],[2472,4.76,7.854,-48.8],[2484,4.36,7.886,-62.96],[2487,4.53,7.889,-62.97],[2505,4.74,7.943,54.52],[2599,4.17,8.25,62.93],[2912,4.34,9.22,33.72],[2920,3.69,9.243,53.9],[3031,4.34,9.639,29.31],[3092,3.27,9.832,30.86],[3179,2.24,10.13,56.54],[3245,4.59,10.33,-46.09],[3300,4.80,10.52,50.51],[3405,4.36,10.84,-57.46],[3414,4.95,10.87,47.02],[3419,2.04,10.9,-17.99],[3455,4.77,11.05,-10.61],[3504,4.48,11.18,48.28],[3693,4.08,11.83,24.27],[3786,4.44,12.17,7.585],[3801,4.90,12.21,50.97],[3821,3.46,12.28,57.82],[3881,4.53,12.45,41.08],[4147,4.78,13.25,-1.144],[4151,4.80,13.27,61.12],[4292,4.83,13.75,58.97],[4422,4.62,14.17,59.18],[4427,2.15,14.18,60.72],[4436,3.86,14.19,38.5],[4463,4.40,14.3,23.42],[4577,4.30,14.65,-29.36],[4906,4.27,15.74,7.89],[5165,3.32,16.52,-46.72],[5348,3.94,17.1,-55.25],[5364,3.46,17.15,-10.18],[5372,4.24,17.19,86.26],[5434,4.26,17.38,47.24],[5447,2.07,17.43,35.62],[5542,4.34,17.78,55.15],[5571,4.66,17.86,21.03],[5586,4.51,17.92,30.09],[5742,4.67,18.44,24.58],[5862,4.97,18.8,-45.53],[5896,4.25,18.94,-68.88],[6193,4.74,19.87,27.26],[6242,4.95,20.02,58.23],[6411,4.87,20.59,45.53],[6537,3.60,21.01,-8.183],[6670,4.90,21.41,-14.6],[6686,2.66,21.45,60.24],[6692,4.72,21.48,68.13],[6813,4.83,21.91,45.41],[6867,3.41,22.09,-43.32],[7007,4.84,22.55,6.144],[7083,3.93,22.81,-49.07],[7097,3.62,22.87,15.35],[7294,4.68,23.48,59.23],[7513,4.10,24.2,41.41],[7588,0.45,24.43,-57.24],[7607,3.59,24.5,48.63],[7818,4.96,25.15,40.58],[7884,4.45,25.36,5.488],[7918,4.96,25.45,42.61],[7999,4.98,25.68,-3.69],[8068,4.01,25.92,50.69],[8102,3.49,26.02,-15.94],[8198,4.26,26.35,9.158],[8497,4.66,27.4,-10.69],[8645,3.74,27.87,-10.34],[8796,3.42,28.27,29.58],[8832,3.88,28.38,19.29],[8833,4.61,28.39,3.188],[8837,4.39,28.41,-46.3],[8886,3.35,28.6,63.67],[8903,2.64,28.66,20.81],[8928,4.68,28.73,-67.65],[9007,3.69,28.99,-51.61],[9009,4.97,29,68.69],[9061,4.92,29.17,-22.53],[9095,4.82,29.29,-47.39],[9153,4.79,29.48,23.6],[9236,2.86,29.69,-61.57],[9347,3.99,30,-21.08],[9480,4.49,30.49,70.91],[9487,3.82,30.51,2.764],[9505,4.99,30.58,54.49],[9598,3.95,30.86,72.42],[9640,2.10,30.97,42.33],[9677,4.68,31.12,-29.3],[9884,2.01,31.79,23.46],[9977,4.78,32.12,37.86],[10053,4.98,32.36,25.94],[10064,3.00,32.39,34.99],[10280,4.94,33.09,30.3],[10324,4.36,33.25,8.847],[10340,4.84,33.31,44.23],[10602,3.56,34.13,-51.51],[10644,4.84,34.26,34.22],[10670,4.03,34.33,33.85],[11001,4.08,35.44,-68.66],[11313,4.73,36.41,50.28],[11345,4.88,36.49,-12.29],[11407,4.24,36.75,-47.7],[11484,4.30,37.04,8.46],[11569,4.46,37.27,67.4],[11767,1.97,37.95,89.26],[11783,4.74,38.02,-15.24],[11918,4.96,38.46,-28.23],[12093,4.87,38.97,5.593],[12387,4.08,39.87,0.3285],[12390,4.83,39.89,-11.87],[12394,4.12,39.9,-68.27],[12413,4.74,39.95,-42.89],[12486,4.11,40.17,-39.86],[12623,4.91,40.56,40.19],[12706,3.47,40.83,3.236],[12719,4.65,40.86,27.71],[12770,4.24,41.03,-13.86],[12777,4.10,41.05,49.23],[12828,4.27,41.24,10.11],[12843,4.47,41.28,-18.57],[12876,4.83,41.39,-67.62],[13061,4.52,41.98,29.25],[13147,4.45,42.27,-32.41],[13209,3.61,42.5,27.26],[13244,4.76,42.62,-75.07],[13254,4.22,42.65,38.32],[13268,3.77,42.67,55.9],[13288,4.76,42.76,-21],[13328,4.56,42.88,35.06],[13531,3.93,43.56,52.76],[13701,3.89,44.11,-8.898],[13847,2.88,44.57,-40.3],[13879,4.68,44.69,39.66],[13884,4.98,44.7,-64.07],[13905,4.94,44.77,35.18],[13914,4.63,44.8,21.34],[13954,4.71,44.93,8.907],[14135,2.54,45.57,4.09],[14146,4.08,45.6,-23.62],[14328,2.91,46.2,53.51],[14354,3.32,46.29,38.84],[14382,4.77,46.39,56.71],[14576,2.09,47.04,40.96],[14632,4.05,47.27,49.61],[14668,3.79,47.37,44.86],[14817,4.61,47.82,39.61],[14838,4.35,47.91,19.73],[14862,4.85,47.98,74.39],[14879,3.80,48.02,-28.99],[15110,4.87,48.73,21.04],[15197,4.80,48.96,-8.82],[15382,4.86,49.59,-22.51],[15416,4.85,49.68,34.22],[15457,4.84,49.84,3.37],[15474,3.70,49.88,-21.76],[15510,4.26,49.98,-43.07],[15520,4.74,50,65.65],[15549,4.47,50.08,29.05],[15648,4.96,50.36,43.33],[15863,1.79,51.08,49.86],[15900,3.61,51.2,9.029],[16083,3.73,51.79,9.733],[16147,4.99,52.01,49.06],[16228,4.21,52.27,59.94],[16244,4.67,52.34,49.51],[16245,4.71,52.34,-62.94],[16281,4.55,52.48,58.88],[16335,4.36,52.64,48],[16341,4.74,52.65,-5.075],[16369,4.14,52.72,12.94],[16537,3.72,53.23,-9.458],[16611,4.26,53.45,-21.63],[16826,4.32,54.12,48.19],[16852,4.29,54.22,0.4017],[16870,4.57,54.27,-40.27],[17304,4.99,55.56,-31.94],[17313,4.97,55.59,33.97],[17351,4.59,55.71,-37.31],[17358,3.01,55.73,47.79],[17378,3.52,55.81,-9.763],[17440,3.84,56.05,-64.81],[17448,3.84,56.08,32.29],[17499,3.72,56.22,24.11],[17529,3.77,56.3,42.58],[17531,4.30,56.3,24.47],[17573,3.87,56.46,24.37],[17587,4.78,56.51,63.35],[17593,4.43,56.54,-12.1],[17608,4.14,56.58,23.95],[17651,4.22,56.71,-23.25],[17678,3.26,56.81,-74.24],[17702,2.85,56.87,24.11],[17797,4.30,57.15,-37.62],[17847,3.62,57.29,24.05],[17874,4.17,57.36,-36.2],[17884,4.39,57.38,65.53],[17959,4.59,57.59,71.33],[18216,4.64,58.43,-24.61],[18246,2.84,58.53,31.88],[18255,4.46,58.57,-2.955],[18488,4.99,59.28,61.11],[18505,4.95,59.36,63.07],[18532,2.90,59.46,40.01],[18543,2.97,59.51,-13.51],[18597,4.56,59.69,-61.4],[18614,3.98,59.74,35.79],[18673,4.62,59.98,-24.02],[18724,3.41,60.17,12.49],[18744,4.48,60.22,-62.16],[18772,4.97,60.33,-61.08],[18907,3.91,60.79,5.989],[19038,4.36,61.17,22.08],[19167,4.25,61.65,50.35],[19343,3.96,62.17,47.71],[19515,4.93,62.71,-41.99],[19587,4.04,62.97,-6.838],[19740,4.84,63.48,9.264],[19747,3.85,63.5,-42.29],[19777,4.87,63.6,-10.26],[19780,3.33,63.61,-62.47],[19811,4.67,63.72,40.48],[19812,4.12,63.72,48.41],[19849,4.43,63.82,-7.653],[19860,4.27,63.88,8.892],[19893,4.26,64.01,-51.49],[19921,4.44,64.12,-59.3],[19990,4.93,64.32,20.58],[20042,3.55,64.47,-33.8],[20070,4.60,64.56,50.3],[20205,3.65,64.95,15.63],[20250,4.97,65.09,27.35],[20252,4.93,65.1,34.57],[20354,4.80,65.39,46.5],[20455,3.77,65.73,17.54],[20535,3.97,66.01,-34.02],[20542,4.80,66.02,17.44],[20635,4.21,66.34,22.29],[20648,4.30,66.37,17.93],[20711,4.28,66.58,22.81],[20713,4.48,66.59,15.62],[20732,4.69,66.65,14.71],[20877,4.96,67.11,16.36],[20885,3.84,67.14,15.96],[20889,3.53,67.15,19.18],[20894,3.40,67.17,15.87],[21029,4.78,67.64,16.19],[21139,4.91,67.97,-0.04401],[21248,4.49,68.38,-29.77],[21273,4.65,68.46,14.84],[21281,3.30,68.5,-55.04],[21393,3.81,68.89,-30.56],[21402,4.25,68.91,10.16],[21421,0.87,68.98,16.51],[21444,3.93,69.08,-3.352],[21476,4.25,69.17,41.26],[21589,4.27,69.54,12.51],[21594,3.86,69.55,-14.3],[21644,4.99,69.72,-12.12],[21683,4.67,69.82,15.92],[21763,4.32,70.11,-19.67],[21770,4.44,70.14,-41.86],[21881,4.27,70.56,22.96],[22109,4.01,71.38,-3.255],[22449,3.19,72.46,6.961],[22453,4.89,72.48,37.49],[22509,4.35,72.65,8.9],[22549,3.68,72.8,5.605],[22667,4.71,73.13,14.25],[22678,4.79,73.16,36.7],[22701,4.36,73.22,-5.453],[22783,4.26,73.51,66.34],[22797,3.71,73.56,2.441],[22845,4.64,73.72,10.15],[22957,4.06,74.09,13.51],[23015,2.69,74.25,33.17],[23040,4.43,74.32,53.75],[23123,4.47,74.64,1.714],[23179,4.93,74.81,37.89],[23231,4.78,74.98,-12.54],[23362,4.91,75.36,-20.05],[23364,4.80,75.36,-7.174],[23416,3.03,75.49,43.82],[23453,3.69,75.62,41.08],[23497,4.62,75.77,21.59],[23522,4.03,75.85,60.44],[23595,4.55,76.1,-35.48],[23607,4.65,76.14,15.4],[23685,3.19,76.37,-22.37],[23693,4.71,76.38,-57.47],[23767,3.18,76.63,41.23],[23783,4.98,76.67,51.6],[23835,4.91,76.86,18.65],[23875,2.78,76.96,-5.086],[23972,4.25,77.29,-8.754],[24010,4.81,77.42,15.6],[24244,4.45,78.07,-11.87],[24305,3.29,78.23,-16.21],[24327,4.36,78.31,-12.94],[24331,4.46,78.32,2.861],[24340,4.82,78.36,38.48],[24372,4.81,78.44,-67.19],[24436,0.18,78.63,-8.202],[24608,0.08,79.17,46],[24659,4.81,79.37,-34.9],[24674,3.59,79.4,-6.844],[24727,4.54,79.54,33.37],[24813,4.69,79.79,40.1],[24822,4.96,79.82,22.1],[24845,4.29,79.89,-13.18],[24927,4.70,80.11,-21.24],[25044,4.72,80.44,-0.3825],[25142,4.99,80.71,3.544],[25247,4.13,80.99,-7.808],[25281,3.35,81.12,-2.397],[25302,4.89,81.19,1.846],[25336,1.64,81.28,6.35],[25428,1.65,81.57,28.61],[25473,4.59,81.71,3.096],[25539,4.88,81.91,21.94],[25606,2.81,82.06,-20.76],[25737,4.71,82.43,-1.092],[25813,4.20,82.7,5.948],[25859,3.86,82.8,-35.47],[25923,4.62,82.98,-7.302],[25930,2.25,83,-0.2991],[25945,4.32,83.05,18.59],[25984,4.71,83.18,32.19],[25985,2.58,83.18,-17.82],[26069,3.76,83.41,-62.49],[26176,4.39,83.71,9.49],[26199,4.78,83.76,-6.002],[26207,3.39,83.78,9.934],[26220,4.98,83.82,-5.387],[26235,4.98,83.85,-5.416],[26237,4.58,83.85,-4.838],[26241,2.75,83.86,-5.91],[26311,1.69,84.05,-1.202],[26366,4.09,84.23,9.291],[26451,2.97,84.41,21.14],[26549,3.77,84.69,-2.6],[26563,4.77,84.72,-7.213],[26594,4.50,84.8,4.121],[26634,2.65,84.91,-34.07],[26727,1.74,85.19,-1.943],[26736,4.95,85.21,-1.129],[26777,4.84,85.32,16.53],[26885,4.90,85.62,1.475],[27072,3.59,86.12,-22.45],[27100,4.34,86.19,-65.74],[27288,3.55,86.74,-14.82],[27321,3.85,86.82,-51.07],[27366,2.07,86.94,-9.67],[27468,4.88,87.25,24.57],[27483,4.51,87.29,39.18],[27511,4.89,87.39,12.65],[27530,4.50,87.46,-56.17],[27628,3.12,87.74,-35.77],[27639,4.72,87.76,37.31],[27654,3.76,87.83,-20.88],[27673,3.97,87.87,39.15],[27750,4.76,88.11,1.855],[27810,4.88,88.28,-33.8],[27830,4.56,88.33,27.61],[27890,4.65,88.53,-63.09],[27913,4.39,88.6,20.28],[27949,4.96,88.71,55.71],[27989,0.45,88.79,7.407],[28010,4.97,88.87,-37.12],[28103,3.71,89.1,-14.17],[28199,4.36,89.38,-35.28],[28237,4.81,89.5,25.95],[28328,3.96,89.79,-42.82],[28358,3.72,89.88,54.28],[28360,1.90,89.88,44.95],[28380,2.65,89.93,37.21],[28404,4.30,89.98,45.94],[28413,4.53,90.01,-3.074],[28574,4.92,90.46,-10.6],[28614,4.12,90.6,9.647],[28716,4.64,90.98,20.14],[28734,4.16,91.03,23.26],[28816,4.92,91.25,-16.48],[28910,4.67,91.54,-14.94],[29038,4.42,91.89,14.77],[29276,4.72,92.57,-54.97],[29426,4.45,92.98,14.21],[29434,4.95,93.01,16.13],[29651,3.99,93.71,-6.275],[29655,3.31,93.72,22.51],[29696,4.32,93.84,29.5],[29807,4.37,94.14,-35.14],[29997,4.76,94.71,69.32],[30060,4.44,94.91,59.01],[30093,4.91,95,-2.944],[30122,3.02,95.08,-30.06],[30277,3.85,95.53,-33.44],[30324,1.98,95.67,-17.96],[30343,2.87,95.74,22.51],[30419,4.39,95.94,4.593],[30438,-0.62,95.99,-52.7],[30520,4.92,96.22,49.29],[30788,4.47,97.04,-32.58],[30867,3.76,97.2,-7.033],[30883,4.13,97.24,20.21],[31125,4.34,97.96,-23.42],[31216,4.47,98.23,7.333],[31407,4.35,98.74,-52.98],[31416,4.54,98.76,-22.96],[31592,3.95,99.17,-19.26],[31681,1.93,99.43,16.4],[31685,3.17,99.44,-43.2],[31700,4.42,99.47,-18.24],[31827,4.82,99.82,-14.15],[31832,4.80,99.83,42.49],[31978,4.66,100.2,9.896],[32246,3.06,101,25.13],[32249,4.49,101,13.23],[32349,-1.44,101.3,-16.72],[32362,3.35,101.3,12.9],[32438,4.86,101.6,59.44],[32533,4.77,101.8,8.037],[32578,4.48,102,2.412],[32607,3.24,102,-61.94],[32759,3.50,102.5,-32.51],[32761,4.41,102.5,-53.62],[32768,2.94,102.5,-50.61],[32844,4.99,102.7,41.78],[32855,4.99,102.7,-34.37],[33018,3.60,103.2,33.96],[33092,4.82,103.4,-20.22],[33152,3.89,103.5,-24.18],[33160,4.08,103.5,-12.04],[33202,4.73,103.7,13.18],[33302,4.66,103.9,-20.14],[33347,4.36,104,-17.05],[33357,4.94,104.1,-48.72],[33449,4.35,104.3,58.42],[33485,4.90,104.4,45.09],[33579,1.50,104.7,-28.97],[33694,4.55,105,76.98],[33856,3.49,105.4,-27.93],[33971,4.99,105.7,-4.239],[33977,3.02,105.8,-23.83],[34045,4.11,105.9,-15.63],[34059,4.92,106,-49.58],[34088,4.01,106,20.57],[34444,1.83,107.1,-26.39],[34481,3.78,107.2,-70.5],[34495,4.83,107.2,-39.66],[34622,4.91,107.6,-4.237],[34693,4.41,107.8,30.25],[34752,4.91,107.9,39.32],[34769,4.15,108,-0.4928],[34834,4.49,108.1,-46.76],[34899,4.87,108.3,-45.18],[34922,4.42,108.4,-44.64],[34981,4.42,108.6,-26.35],[35020,4.75,108.7,-48.27],[35037,4.01,108.7,-26.77],[35205,4.66,109.1,-27.88],[35210,4.83,109.2,-23.32],[35228,3.97,109.2,-67.96],[35264,2.71,109.3,-37.1],[35350,3.58,109.5,16.54],[35363,4.65,109.6,-36.73],[35412,4.88,109.7,-24.56],[35415,4.37,109.7,-24.95],[35550,3.50,110,21.98],[35727,4.94,110.6,-19.02],[35904,2.45,111,-29.3],[36041,4.99,111.4,9.276],[36046,3.78,111.4,27.8],[36145,4.61,111.7,49.21],[36188,2.89,111.8,8.289],[36284,4.33,112,8.926],[36366,4.16,112.3,31.78],[36377,3.25,112.3,-43.3],[36425,4.55,112.4,12.01],[36431,4.85,112.5,-23.02],[36514,4.65,112.7,-30.96],[36547,4.92,112.8,82.41],[36773,4.82,113.4,-14.52],[36795,4.44,113.5,-22.3],[36850,1.58,113.6,31.89],[36917,4.65,113.8,-28.37],[36942,4.93,113.9,-52.53],[36962,4.06,114,26.9],[37096,4.53,114.3,-34.97],[37173,4.69,114.6,-25.36],[37229,3.80,114.7,-26.8],[37265,4.89,114.8,34.58],[37279,0.40,114.8,5.225],[37297,4.84,114.9,-38.31],[37379,4.98,115.1,-15.26],[37447,3.94,115.3,-9.551],[37504,3.93,115.5,-72.61],[37609,4.93,115.8,58.71],[37629,4.23,115.8,28.88],[37648,4.63,115.9,-28.41],[37677,3.94,116,-28.95],[37740,3.57,116.1,24.4],[37819,3.62,116.3,-37.97],[37826,1.16,116.3,28.03],[37908,4.89,116.5,18.51],[38070,4.40,117,-25.94],[38089,4.69,117.1,-47.08],[38164,4.10,117.3,-46.37],[38170,3.34,117.3,-24.86],[38414,3.71,118.1,-40.58],[38455,4.49,118.2,-38.86],[38500,4.63,118.3,-49.61],[38518,4.22,118.3,-48.1],[38538,4.97,118.4,26.77],[38827,3.46,119.2,-52.98],[38835,4.20,119.2,-22.88],[38901,4.76,119.4,-30.33],[38957,4.47,119.6,-49.24],[39079,4.93,119.9,-3.68],[39095,4.61,120,-18.4],[39138,4.81,120.1,-63.57],[39211,4.69,120.3,-1.393],[39311,4.39,120.6,2.335],[39424,4.94,120.9,27.79],[39429,2.21,120.9,-40],[39757,2.83,121.9,-24.3],[39794,4.35,122,-68.62],[39847,4.78,122.1,51.51],[39863,4.36,122.1,-2.984],[39903,4.74,122.3,-61.3],[39906,4.40,122.3,-19.25],[39953,1.75,122.4,-47.34],[40084,4.72,122.8,-12.93],[40091,4.44,122.8,-39.62],[40096,4.73,122.9,-42.99],[40167,4.67,123.1,17.65],[40259,4.99,123.3,-15.79],[40274,4.78,123.4,-35.9],[40326,4.42,123.5,-40.35],[40526,3.53,124.1,9.186],[40702,4.05,124.6,-76.92],[40706,4.44,124.6,-36.66],[40888,4.34,125.2,-77.48],[40945,4.83,125.3,-33.05],[41037,1.86,125.6,-59.51],[41039,4.79,125.6,-48.49],[41075,4.25,125.7,43.19],[41307,3.91,126.4,-3.906],[41312,3.77,126.4,-66.14],[41704,3.35,127.6,60.72],[42134,4.84,128.8,-58.01],[42312,4.11,129.4,-42.99],[42313,4.14,129.4,5.704],[42402,4.45,129.7,3.341],[42483,4.86,129.9,-29.56],[42509,4.98,130,-12.48],[42515,3.97,130,-35.31],[42527,4.59,130.1,64.33],[42536,3.60,130.1,-52.92],[42568,4.31,130.2,-59.76],[42570,3.77,130.2,-46.65],[42624,4.74,130.3,-47.32],[42662,4.87,130.4,-15.94],[42726,4.83,130.6,-53.11],[42799,4.30,130.8,3.399],[42806,4.66,130.8,21.47],[42828,3.68,130.9,-33.19],[42835,4.63,130.9,-7.234],[42884,4.05,131.1,-42.65],[42911,3.94,131.2,18.15],[42913,1.93,131.2,-54.71],[43023,3.87,131.5,-46.04],[43067,4.32,131.6,-13.55],[43103,4.03,131.7,28.76],[43105,4.50,131.7,-56.77],[43109,3.38,131.7,6.419],[43234,4.35,132.1,5.838],[43347,4.94,132.4,-45.31],[43409,4.02,132.6,-27.71],[43783,3.84,133.8,-60.64],[43813,3.11,133.8,5.946],[43825,4.87,133.9,-27.68],[43878,4.68,134.1,-52.72],[43937,4.93,134.2,-59.23],[44066,4.26,134.6,11.86],[44127,3.12,134.8,48.04],[44191,4.45,135,-41.25],[44248,3.96,135.2,41.78],[44382,4.00,135.6,-66.4],[44390,4.74,135.6,67.63],[44471,3.57,135.9,47.16],[44511,3.75,136,-47.1],[44599,4.47,136.3,-72.6],[44626,4.66,136.4,-70.54],[44659,4.99,136.5,5.092],[44700,4.56,136.6,38.45],[44816,2.23,137,-43.43],[44824,4.62,137,-25.86],[44901,4.46,137.2,51.6],[45038,4.80,137.6,67.13],[45075,4.67,137.7,63.51],[45080,3.43,137.7,-58.97],[45085,4.99,137.8,-44.87],[45101,3.96,137.8,-62.32],[45238,1.67,138.3,-69.72],[45336,3.89,138.6,2.314],[45439,4.92,138.9,-38.57],[45448,4.63,138.9,-37.41],[45493,4.80,139,54.02],[45496,4.34,139.1,-57.54],[45556,2.21,139.3,-59.28],[45688,3.82,139.7,36.8],[45751,4.77,139.9,-11.97],[45811,4.80,140.1,-9.556],[45856,4.79,140.2,-62.4],[45860,3.14,140.3,34.39],[45902,4.71,140.4,-25.97],[45941,2.47,140.5,-55.01],[46026,4.71,140.8,-28.83],[46146,4.47,141.2,26.18],[46371,4.72,141.8,-22.34],[46390,1.99,141.9,-8.659],[46509,4.59,142.3,-2.769],[46515,4.51,142.3,-35.95],[46651,3.60,142.7,-40.47],[46701,3.16,142.8,-57.03],[46733,3.65,142.9,63.06],[46750,4.32,142.9,22.97],[46771,4.99,143,11.3],[46776,4.54,143,-1.185],[46853,3.17,143.2,51.68],[46952,4.54,143.6,36.4],[46974,4.08,143.6,-59.23],[46977,4.54,143.6,69.83],[47006,4.47,143.7,52.05],[47029,4.81,143.8,39.62],[47175,4.34,144.2,-49.36],[47193,4.28,144.3,81.33],[47310,4.68,144.6,4.649],[47391,4.51,144.8,-61.33],[47431,3.90,145,-1.143],[47508,3.52,145.3,9.892],[47522,4.76,145.3,-23.59],[47592,4.93,145.6,-23.92],[47758,4.78,146.1,-27.77],[47854,3.69,146.3,-62.51],[47908,2.97,146.5,23.77],[48002,2.92,146.8,-65.07],[48319,3.78,147.7,59.04],[48356,4.11,147.9,-14.85],[48374,4.58,147.9,-46.55],[48402,4.55,148,54.06],[48455,3.88,148.2,26.01],[48559,4.87,148.6,-25.93],[48615,4.94,148.7,-19.01],[48774,3.52,149.2,-54.57],[49029,4.68,150.1,8.044],[49402,4.60,151.3,-13.06],[49583,3.48,151.8,16.76],[49593,4.49,151.9,35.24],[49637,4.39,152,9.998],[49641,4.48,152,-0.3716],[49669,1.36,152.1,11.97],[49712,4.85,152.2,-51.81],[49841,3.61,152.6,-12.35],[50099,3.29,153.4,-70.04],[50191,3.85,153.7,-42.12],[50335,3.43,154.2,23.42],[50371,3.39,154.3,-61.33],[50372,3.45,154.3,42.91],[50555,4.59,154.9,-55.03],[50564,4.78,154.9,19.47],[50583,2.01,155,19.84],[50676,4.50,155.2,-56.04],[50799,4.82,155.6,-41.65],[50801,3.06,155.6,41.5],[50847,4.97,155.7,-66.9],[50933,4.94,156,65.57],[50954,3.99,156.1,-74.03],[51056,4.72,156.5,33.8],[51069,3.83,156.5,-16.84],[51172,4.28,156.8,-31.07],[51192,4.65,156.9,-57.64],[51232,3.81,157,-58.74],[51233,4.20,157,36.71],[51438,4.72,157.6,-71.99],[51459,4.82,157.7,55.98],[51495,4.94,157.8,-73.22],[51523,4.89,157.8,-53.72],[51576,3.30,158,-61.69],[51624,3.84,158.2,9.307],[51658,4.72,158.3,40.43],[51808,4.86,158.8,75.71],[51839,4.11,158.9,-78.61],[51849,4.45,158.9,-57.56],[51979,4.87,159.3,-27.41],[51986,3.84,159.3,-48.23],[52009,4.89,159.4,-13.38],[52085,4.91,159.6,-16.88],[52098,4.68,159.7,31.98],[52102,4.69,159.7,-59.18],[52154,4.29,159.8,-55.6],[52370,4.76,160.6,-64.47],[52419,2.74,160.7,-64.39],[52468,4.58,160.9,-60.57],[52502,4.80,161,-63.96],[52633,4.45,161.4,-80.54],[52727,2.69,161.7,-49.42],[52736,4.87,161.7,-64.38],[52943,3.11,162.4,-16.19],[53229,3.79,163.3,34.21],[53253,3.78,163.4,-58.85],[53295,4.66,163.5,43.19],[53417,4.30,163.9,24.75],[53502,4.60,164.2,-37.14],[53740,4.08,164.9,-18.3],[53773,4.37,165,-42.23],[53807,4.84,165.1,3.617],[53824,4.98,165.2,6.101],[53907,4.73,165.5,-2.485],[53910,2.34,165.5,56.38],[53954,4.42,165.6,20.18],[54061,1.81,165.9,61.75],[54182,4.62,166.3,7.336],[54204,4.92,166.3,-27.29],[54301,4.62,166.6,-62.42],[54463,3.93,167.1,-58.98],[54539,3.00,167.4,44.5],[54682,4.46,167.9,-22.83],[54751,4.59,168.2,-60.32],[54872,2.56,168.5,20.52],[54879,3.33,168.6,15.43],[54951,4.56,168.8,23.1],[55084,4.45,169.2,-3.652],[55219,3.49,169.6,33.09],[55266,4.76,169.8,38.19],[55282,3.56,169.8,-14.78],[55425,3.90,170.3,-54.49],[55434,4.05,170.3,6.029],[55560,4.99,170.7,43.48],[55642,4.00,171,10.53],[55687,4.81,171.2,-10.86],[55705,4.06,171.2,-17.68],[55945,4.95,172,2.856],[56127,4.77,172.6,-3.004],[56211,3.82,172.9,69.33],[56280,4.93,173.1,-29.26],[56343,3.54,173.3,-31.86],[56480,4.62,173.7,-54.26],[56561,3.11,173.9,-63.02],[56633,4.70,174.2,-9.802],[56647,4.30,174.2,-0.8237],[56922,4.70,175.1,-34.74],[56986,4.93,175.2,-62.09],[57283,4.71,176.2,-18.35],[57328,4.84,176.3,8.258],[57363,3.63,176.4,-66.73],[57380,4.04,176.5,6.529],[57399,3.69,176.5,47.78],[57439,4.11,176.6,-61.18],[57443,4.89,176.6,-40.5],[57565,4.50,177,20.22],[57581,4.75,177.1,-66.81],[57632,2.14,177.3,14.57],[57669,4.30,177.4,-63.79],[57696,4.98,177.5,-70.23],[57757,3.59,177.7,1.765],[57803,4.47,177.8,-45.17],[57851,4.89,178,-65.21],[57936,4.29,178.2,-33.91],[58001,2.41,178.5,53.69],[58484,4.88,179.9,-78.22],[58590,4.65,180.2,6.614],[58758,4.32,180.8,-63.31],[58867,4.72,181.1,-63.17],[58948,4.12,181.3,8.733],[59072,4.14,181.7,-64.61],[59173,4.46,182,-50.66],[59196,2.58,182.1,-50.72],[59199,4.02,182.1,-24.73],[59316,3.02,182.5,-22.62],[59449,3.97,182.9,-52.37],[59747,2.79,183.8,-58.75],[59774,3.32,183.9,57.03],[59803,2.58,184,-17.54],[59847,4.93,184.1,23.95],[59856,4.99,184.1,33.06],[59929,4.06,184.4,-67.96],[60000,4.24,184.6,-79.31],[60009,4.06,184.6,-64],[60129,3.89,185,-0.6668],[60172,4.97,185.1,3.313],[60202,4.72,185.2,17.79],[60260,3.59,185.3,-60.4],[60351,4.78,185.6,25.85],[60485,4.76,186,51.56],[60697,4.92,186.6,27.27],[60710,4.82,186.6,-51.45],[60718,0.77,186.6,-63.1],[60742,4.35,186.7,28.27],[60746,4.98,186.7,26.83],[60823,3.91,187,-50.23],[60965,2.94,187.5,-16.52],[61084,1.59,187.8,-57.11],[61174,4.30,188,-16.2],[61199,3.84,188.1,-72.13],[61281,3.85,188.4,69.79],[61317,4.24,188.4,41.36],[61359,2.65,188.6,-23.4],[61384,4.95,188.7,70.02],[61394,4.80,188.7,22.63],[61585,2.69,189.3,-69.14],[61622,3.85,189.4,-48.54],[61740,4.66,189.8,-7.996],[61789,4.63,190,-39.99],[61932,2.20,190.4,-48.96],[61941,2.74,190.4,-1.449],[61960,4.88,190.5,10.24],[61966,4.91,190.5,-59.69],[62012,4.66,190.6,-48.81],[62268,4.69,191.4,-60.98],[62322,3.04,191.6,-68.11],[62327,4.62,191.6,-56.49],[62434,1.25,191.9,-59.69],[62683,4.90,192.7,-34],[62763,4.93,192.9,27.54],[62867,4.33,193.3,-48.94],[62886,4.89,193.3,21.24],[62896,4.25,193.4,-40.18],[62956,1.76,193.5,55.96],[62985,4.77,193.6,-9.539],[63003,4.03,193.6,-57.18],[63007,4.62,193.7,-59.15],[63090,3.39,193.9,3.397],[63125,2.89,194,38.32],[63355,4.76,194.7,17.41],[63462,4.88,195.1,30.79],[63503,4.93,195.2,56.37],[63608,2.85,195.5,10.96],[63613,3.61,195.6,-71.55],[63724,4.83,195.9,-49.53],[63945,4.71,196.6,-48.46],[64004,4.27,196.7,-49.91],[64022,4.80,196.8,27.62],[64166,4.94,197.3,-23.12],[64238,4.38,197.5,-5.539],[64241,4.32,197.5,17.53],[64394,4.23,198,27.88],[64408,4.85,198,-37.8],[64425,4.58,198.1,-59.92],[64540,4.94,198.4,40.15],[64583,4.90,198.6,-59.1],[64661,4.79,198.8,-67.89],[64820,4.86,199.3,-66.78],[64844,4.72,199.4,40.57],[64852,4.78,199.4,5.47],[64924,4.74,199.6,-18.31],[64962,2.99,199.7,-23.17],[65109,2.75,200.1,-36.71],[65271,4.52,200.7,-60.99],[65378,2.23,201,54.93],[65387,4.52,201,-64.54],[65474,0.98,201.3,-11.16],[65477,3.99,201.3,54.99],[65639,4.76,201.9,-15.97],[65721,4.97,202.1,13.78],[65936,3.90,202.8,-39.41],[66006,4.68,203,-6.256],[66200,4.92,203.5,3.659],[66234,4.68,203.6,49.02],[66249,3.38,203.7,-0.5958],[66257,4.91,203.7,37.18],[66458,4.82,204.4,36.29],[66657,2.29,205,-53.47],[66738,4.63,205.2,54.68],[66821,4.99,205.4,-54.56],[67153,4.23,206.4,-33.04],[67234,4.64,206.7,-51.43],[67275,4.50,206.8,17.46],[67301,1.85,206.9,49.31],[67457,4.19,207.4,-34.45],[67459,4.05,207.4,15.8],[67464,3.41,207.4,-41.69],[67472,3.47,207.4,-42.47],[67480,4.92,207.4,21.26],[67494,4.96,207.5,-18.13],[67627,4.58,207.9,64.72],[67665,4.76,207.9,34.44],[67669,4.32,208,-32.99],[67786,4.75,208.3,-31.93],[67927,2.68,208.7,18.4],[68002,2.55,208.9,-47.29],[68191,4.71,209.4,-63.69],[68245,3.83,209.6,-42.1],[68282,3.87,209.7,-44.8],[68520,4.23,210.4,1.545],[68523,4.34,210.4,-45.6],[68702,0.61,211,-60.37],[68756,3.67,211.1,64.38],[68862,4.36,211.5,-41.18],[68895,3.25,211.6,-26.68],[68933,2.06,211.7,-36.37],[69112,4.80,212.2,77.55],[69191,4.74,212.5,-53.44],[69226,4.82,212.6,25.09],[69269,4.93,212.7,-16.3],[69389,4.99,213.1,2.409],[69427,4.18,213.2,-10.27],[69483,4.53,213.4,51.79],[69673,-0.05,213.9,19.18],[69701,4.07,214,-6.001],[69713,4.75,214,51.37],[69732,4.18,214.1,46.09],[69879,4.80,214.5,35.51],[69896,4.89,214.6,-81.01],[69974,4.52,214.8,-13.37],[69996,3.55,214.9,-46.06],[70027,4.84,214.9,16.31],[70069,4.30,215.1,-56.39],[70090,4.05,215.1,-37.89],[70104,4.78,215.2,-45.19],[70264,4.76,215.7,-58.46],[70300,4.41,215.8,-39.51],[70306,4.78,215.8,-27.75],[70327,4.86,215.8,8.447],[70497,4.04,216.3,51.85],[70574,4.56,216.5,-45.22],[70576,4.33,216.5,-45.38],[70638,4.31,216.7,-83.67],[70692,4.25,216.9,75.7],[70753,4.97,217,-29.49],[70755,4.81,217.1,-2.228],[71053,3.57,218,30.37],[71075,3.04,218,38.31],[71121,4.44,218.2,-50.46],[71284,4.47,218.7,29.75],[71352,2.33,218.9,-42.16],[71536,4.05,219.5,-49.43],[71681,1.35,219.9,-60.84],[71683,-0.01,219.9,-60.83],[71762,4.49,220.2,16.42],[71795,3.78,220.3,13.73],[71832,4.86,220.4,8.162],[71860,2.30,220.5,-47.39],[71865,4.01,220.5,-37.79],[71908,3.18,220.6,-64.98],[71957,3.87,220.8,-5.658],[71995,4.80,220.9,26.53],[72010,4.06,220.9,-35.17],[72104,4.92,221.2,-35.19],[72105,2.35,221.2,27.07],[72125,4.60,221.3,16.96],[72220,3.73,221.6,1.893],[72370,3.83,222,-79.04],[72571,4.42,222.6,-27.96],[72607,2.07,222.7,74.16],[72622,2.75,222.7,-16.04],[72631,4.93,222.8,-2.299],[72659,4.54,222.8,19.1],[72683,4.32,222.9,-43.58],[73165,4.47,224.3,-4.346],[73199,4.63,224.4,65.93],[73273,2.68,224.6,-43.13],[73334,3.13,224.8,-42.1],[73473,4.91,225.2,-8.519],[73555,3.49,225.5,40.39],[73568,4.80,225.5,25.01],[73620,4.39,225.7,2.091],[73695,4.83,225.9,47.65],[73714,3.25,226,-25.28],[73745,4.52,226.1,26.95],[73807,3.91,226.3,-47.05],[73996,4.93,226.8,24.87],[74117,4.07,227.2,-45.28],[74376,3.88,228,-48.74],[74392,4.54,228.1,-19.79],[74395,3.41,228.1,-52.1],[74449,4.83,228.2,-44.5],[74604,4.91,228.7,-31.52],[74666,3.46,228.9,33.31],[74785,2.61,229.3,-9.383],[74824,4.07,229.4,-58.8],[74837,4.85,229.4,-63.61],[74857,4.35,229.5,-30.15],[74911,4.27,229.6,-47.88],[74946,2.87,229.7,-68.68],[75097,3.00,230.2,71.83],[75141,3.22,230.3,-40.65],[75177,3.57,230.5,-36.26],[75206,4.99,230.5,-47.93],[75264,3.37,230.7,-44.69],[75304,4.54,230.8,-36.86],[75312,4.99,230.8,30.29],[75323,4.48,230.8,-59.32],[75379,4.92,231,-10.32],[75411,4.31,231.1,37.38],[75458,3.29,231.2,58.97],[75501,4.60,231.3,-38.73],[75695,3.66,232,29.11],[76041,4.98,232.9,40.9],[76127,4.14,233.2,31.36],[76219,4.61,233.5,-10.06],[76267,2.22,233.7,26.71],[76276,3.80,233.7,10.54],[76297,2.80,233.8,-41.17],[76333,3.91,233.9,-14.79],[76371,4.55,234,-44.96],[76440,4.11,234.2,-66.32],[76470,3.60,234.3,-28.14],[76552,4.34,234.5,-42.57],[76600,3.66,234.7,-29.78],[76669,4.64,234.8,36.64],[76705,4.66,234.9,-34.41],[76742,4.97,235.1,-23.82],[76829,4.64,235.3,-44.66],[76852,4.51,235.4,19.67],[76880,4.75,235.5,-19.68],[76945,4.75,235.7,-34.71],[76952,3.81,235.7,26.3],[77055,4.29,236,77.79],[77070,2.63,236.1,6.426],[77233,3.65,236.5,15.42],[77257,4.42,236.6,7.353],[77450,4.09,237.2,18.14],[77512,4.59,237.4,26.07],[77516,3.54,237.4,-3.43],[77622,3.71,237.7,4.478],[77634,3.97,237.7,-33.63],[77635,4.63,237.7,-25.75],[77655,4.79,237.8,35.66],[77661,4.74,237.8,20.98],[77760,4.60,238.2,42.45],[77840,4.59,238.4,-25.33],[77853,4.13,238.5,-16.73],[77952,2.83,238.8,-63.43],[78072,3.85,239.1,15.66],[78104,3.87,239.2,-29.21],[78159,4.14,239.4,26.88],[78180,4.96,239.4,54.75],[78207,4.95,239.5,-14.28],[78265,2.89,239.7,-26.11],[78323,4.99,239.9,-41.74],[78384,3.42,240,-38.4],[78401,2.29,240.1,-22.62],[78493,4.98,240.4,29.85],[78527,4.01,240.5,58.57],[78554,4.82,240.6,22.8],[78592,4.72,240.7,46.04],[78639,4.65,240.8,-49.23],[78650,4.96,240.8,-25.87],[78655,4.90,240.9,-38.6],[78662,4.63,240.9,-57.78],[78820,2.56,241.4,-19.81],[78821,4.90,241.4,-19.8],[78914,4.73,241.6,-45.17],[78918,4.22,241.6,-36.8],[78933,3.93,241.7,-20.67],[78990,4.31,241.9,-20.87],[79101,4.23,242.2,44.93],[79119,4.73,242.2,36.49],[79374,4.00,243,-19.46],[79375,4.93,243,-10.06],[79404,4.58,243.1,-27.93],[79509,4.95,243.4,-54.63],[79593,2.73,243.6,-3.694],[79664,3.86,243.9,-63.69],[79790,4.97,244.3,-50.07],[79822,4.95,244.4,75.76],[79881,4.80,244.6,-28.61],[79882,3.23,244.6,-4.693],[79992,3.91,244.9,46.31],[80000,4.01,245,-50.16],[80047,4.68,245.1,-78.7],[80079,4.55,245.2,-24.17],[80112,2.90,245.3,-25.59],[80170,3.74,245.5,19.15],[80179,4.82,245.5,1.029],[80181,4.86,245.5,30.89],[80331,2.73,246,61.51],[80343,4.48,246,-20.04],[80463,4.57,246.4,14.03],[80473,4.57,246.4,-23.45],[80569,4.22,246.8,-18.46],[80582,4.46,246.8,-47.55],[80628,4.62,247,-8.372],[80650,4.94,247,68.77],[80686,4.90,247.1,-70.08],[80704,4.83,247.2,41.88],[80763,1.06,247.4,-26.43],[80815,4.79,247.6,-25.12],[80816,2.78,247.6,21.49],[80883,3.82,247.7,1.984],[80894,4.29,247.8,-16.61],[80911,4.24,247.8,-34.7],[80975,4.45,248,-21.47],[81008,4.84,248.2,11.49],[81065,3.86,248.4,-78.9],[81122,4.86,248.5,-44.05],[81126,4.20,248.5,42.44],[81266,2.82,249,-28.22],[81304,4.18,249.1,-35.26],[81377,2.54,249.3,-10.57],[81497,4.86,249.7,48.93],[81660,4.84,250.2,64.59],[81693,2.81,250.3,31.6],[81724,4.91,250.4,-17.74],[81833,3.48,250.7,38.92],[81852,4.23,250.8,-77.52],[82020,4.84,251.3,56.78],[82080,4.21,251.5,82.04],[82273,1.91,252.2,-69.03],[82321,4.82,252.3,45.98],[82363,3.77,252.4,-59.04],[82369,4.64,252.5,-10.78],[82396,2.29,252.5,-34.29],[82514,3.00,253,-38.05],[82545,3.56,253.1,-38.02],[82671,4.70,253.5,-42.36],[82673,4.39,253.5,10.17],[82729,3.62,253.6,-42.36],[82860,4.88,254,65.13],[83000,3.19,254.4,9.375],[83081,3.12,254.7,-55.99],[83153,4.06,254.9,-53.16],[83207,3.92,255.1,30.93],[83262,4.82,255.3,-4.223],[83430,4.97,255.8,14.09],[83574,4.83,256.2,-34.12],[83608,4.91,256.3,54.47],[83613,4.89,256.3,12.74],[83895,3.17,257.2,65.71],[84012,2.43,257.6,-15.72],[84143,3.32,258,-43.24],[84345,2.78,258.7,14.39],[84379,3.12,258.8,24.84],[84380,3.16,258.8,36.81],[84405,4.33,258.8,-26.6],[84514,4.72,259.2,-0.4453],[84573,4.80,259.3,33.1],[84606,4.64,259.4,37.29],[84880,4.32,260.2,-12.85],[84893,4.39,260.3,-21.11],[84969,4.76,260.5,-67.77],[84970,3.27,260.5,-25],[85112,4.15,260.9,37.15],[85258,2.84,261.3,-55.53],[85267,3.31,261.3,-56.38],[85340,4.16,261.6,-24.18],[85355,4.34,261.6,4.14],[85365,4.53,261.7,-5.087],[85423,4.28,261.8,-29.87],[85670,2.79,262.6,52.3],[85693,4.41,262.7,26.11],[85696,2.70,262.7,-37.3],[85727,3.60,262.8,-60.68],[85755,4.78,262.9,-23.96],[85792,2.84,263,-49.88],[85819,4.89,263,55.18],[85822,4.35,263.1,86.59],[85829,4.86,263.1,55.17],[85927,1.62,263.4,-37.1],[86032,2.08,263.7,12.56],[86092,4.56,263.9,-46.51],[86170,4.26,264.1,-38.64],[86201,4.77,264.2,68.76],[86228,1.86,264.3,-43],[86263,3.54,264.4,-15.4],[86284,4.58,264.5,-8.119],[86414,3.82,264.9,46.01],[86486,4.76,265.1,-49.42],[86565,4.24,265.4,-12.88],[86614,4.57,265.5,72.15],[86670,2.39,265.6,-39.03],[86736,4.86,265.9,-21.68],[86742,2.76,265.9,4.567],[86929,3.61,266.4,-64.72],[86974,3.42,266.6,27.72],[87072,4.53,266.9,-27.83],[87073,2.99,266.9,-40.13],[87108,3.75,267,2.707],[87220,4.79,267.3,-31.7],[87261,3.19,267.5,-37.04],[87294,4.78,267.5,-40.09],[87585,3.73,268.4,56.87],[87808,3.86,269.1,37.25],[87833,2.24,269.2,51.49],[87846,4.85,269.2,-44.34],[87933,3.70,269.4,29.25],[87936,4.88,269.4,-41.72],[87998,4.41,269.6,30.19],[88048,3.32,269.8,-9.774],[88116,4.74,269.9,-23.82],[88128,4.67,270,16.75],[88149,4.79,270.1,4.369],[88175,4.62,270.1,-3.69],[88192,3.93,270.2,2.932],[88267,4.26,270.4,21.6],[88290,4.42,270.4,1.305],[88404,4.77,270.8,-8.18],[88567,4.66,271.3,-29.58],[88601,4.03,271.4,2.5],[88635,2.98,271.5,-30.42],[88657,4.96,271.5,22.22],[88714,3.65,271.7,-50.09],[88726,4.92,271.7,-43.43],[88765,4.64,271.8,8.734],[88771,3.71,271.8,9.564],[88794,3.84,271.9,28.76],[88839,4.55,272,-28.46],[88866,4.33,272.1,-63.67],[88886,4.37,272.2,20.81],[89112,4.52,272.8,-45.95],[89153,4.96,272.9,-23.7],[89172,4.96,273,31.41],[89341,3.84,273.4,-21.06],[89348,4.99,273.5,64.4],[89642,3.10,274.4,-36.76],[89678,4.66,274.5,-27.04],[89826,4.33,275,36.06],[89861,4.92,275.1,21.96],[89908,4.22,275.2,71.34],[89918,4.85,275.2,3.377],[89931,2.72,275.2,-29.83],[89937,3.55,275.3,72.73],[89962,3.23,275.3,-2.899],[90098,4.35,275.8,-61.49],[90135,4.66,275.9,-8.934],[90139,3.85,275.9,21.77],[90156,4.98,276,58.8],[90185,1.79,276,-34.38],[90289,4.81,276.3,-20.54],[90344,4.82,276.5,65.56],[90422,3.49,276.7,-45.97],[90496,2.82,277,-25.42],[90568,4.10,277.2,-49.07],[90595,4.67,277.3,-14.57],[90797,4.63,277.8,-62.28],[90830,4.92,277.9,-45.91],[90905,4.77,278.1,57.05],[90982,4.62,278.4,-42.31],[91117,3.85,278.8,-8.244],[91262,0.03,279.2,38.78],[91726,4.70,280.6,-9.053],[91792,4.01,280.8,-71.43],[91845,4.88,280.9,-8.275],[91918,4.86,281.1,-35.64],[91919,4.67,281.1,39.67],[91926,4.59,281.1,39.61],[91971,4.34,281.2,37.61],[92024,4.78,281.4,-64.87],[92041,3.17,281.4,-26.99],[92043,4.19,281.4,20.55],[92088,4.83,281.5,26.66],[92161,4.34,281.8,18.18],[92175,4.22,281.8,-4.748],[92420,3.52,282.5,33.36],[92512,4.63,282.8,59.39],[92609,4.22,283.1,-62.19],[92689,4.92,283.3,50.71],[92761,4.86,283.5,-22.74],[92782,4.82,283.6,71.3],[92791,4.22,283.6,36.9],[92818,4.57,283.7,22.65],[92855,2.05,283.8,-26.3],[92862,4.08,283.8,43.95],[92946,4.62,284.1,4.204],[92951,4.98,284.1,4.202],[93015,4.40,284.2,-67.23],[93026,4.83,284.3,-5.846],[93085,3.52,284.4,-21.11],[93148,4.85,284.6,-52.94],[93174,4.83,284.7,-37.11],[93194,3.25,284.7,32.69],[93244,4.02,284.9,15.07],[93279,4.94,285,32.15],[93429,4.02,285.4,-5.739],[93506,2.60,285.7,-29.88],[93542,4.74,285.8,-42.1],[93683,3.76,286.2,-21.74],[93747,2.99,286.4,13.86],[93805,3.43,286.6,-4.883],[93825,4.23,286.6,-37.06],[93864,3.32,286.7,-27.67],[94005,4.57,287.1,-40.5],[94114,4.11,287.4,-37.9],[94141,2.88,287.4,-21.02],[94160,4.10,287.5,-39.34],[94376,3.07,288.1,67.66],[94481,4.43,288.4,39.15],[94643,4.86,288.9,-25.26],[94648,4.45,288.9,73.36],[94703,4.76,289.1,21.39],[94713,4.35,289.1,38.13],[94779,3.80,289.3,53.37],[94820,4.88,289.4,-18.95],[95066,4.98,290.1,-5.416],[95081,4.60,290.2,65.71],[95168,3.92,290.4,-17.85],[95176,4.52,290.4,-15.96],[95241,3.96,290.7,-44.46],[95294,4.27,290.8,-44.8],[95347,3.96,291,-40.62],[95372,4.99,291,29.62],[95501,3.36,291.4,3.115],[95585,4.64,291.6,0.3386],[95771,4.44,292.2,24.66],[95853,3.76,292.4,51.73],[95947,3.05,292.7,27.96],[96052,4.74,292.9,34.45],[96100,4.67,293.1,69.66],[96229,4.45,293.5,7.379],[96341,4.88,293.8,-48.1],[96441,4.49,294.1,50.22],[96465,4.59,294.2,-24.88],[96468,4.36,294.2,-1.287],[96483,4.93,294.2,-7.027],[96683,4.68,294.8,30.15],[96757,4.39,295,18.01],[96837,4.39,295.3,17.48],[97118,4.89,296.1,37.35],[97165,2.86,296.2,45.13],[97278,2.72,296.6,10.61],[97290,4.87,296.6,-19.76],[97365,3.68,296.8,18.53],[97433,3.84,297,70.27],[97649,0.76,297.7,8.868],[97679,4.90,297.8,22.61],[97804,3.87,298.1,1.006],[97886,4.57,298.4,24.08],[97938,4.71,298.6,8.461],[98032,4.12,298.8,-41.87],[98036,3.71,298.8,6.407],[98055,4.91,298.9,52.44],[98066,4.70,299,-26.3],[98068,4.95,299,38.49],[98073,4.98,299,58.85],[98110,3.89,299.1,35.08],[98162,4.54,299.2,-27.17],[98337,3.51,299.7,19.49],[98353,4.84,299.7,-26.2],[98412,4.37,299.9,-35.28],[98495,3.97,300.1,-72.91],[98543,4.66,300.3,27.75],[98608,4.95,300.4,-59.38],[98688,4.43,300.7,-27.71],[98702,4.51,300.7,67.87],[98761,4.77,300.9,-37.94],[98842,4.99,301.1,-32.06],[99120,4.93,301.8,-52.88],[99240,3.55,302.2,-66.18],[99255,4.38,302.2,77.71],[99303,4.93,302.4,36.84],[99473,3.24,302.8,-0.8215],[99639,4.80,303.3,46.82],[99655,4.28,303.3,56.57],[99675,3.80,303.4,46.74],[99742,4.94,303.6,15.2],[99770,4.93,303.6,36.81],[99824,4.79,303.8,25.59],[99848,3.96,303.9,47.71],[99874,4.50,303.9,27.81],[100027,4.30,304.4,-12.51],[100044,4.77,304.4,38.03],[100064,3.58,304.5,-12.54],[100310,4.77,305.2,-12.76],[100345,3.05,305.3,-14.78],[100453,2.23,305.6,40.26],[100587,4.43,306,32.19],[100751,1.94,306.4,-56.74],[101027,4.77,307.2,-17.81],[101076,4.01,307.3,30.37],[101093,4.21,307.4,62.99],[101101,4.91,307.4,-2.886],[101138,4.94,307.5,48.95],[101421,4.03,308.3,11.3],[101474,4.61,308.5,35.25],[101589,4.64,308.8,14.67],[101612,4.75,308.9,-60.58],[101692,4.91,309.2,-2.55],[101769,3.64,309.4,14.6],[101772,3.11,309.4,-47.29],[101773,4.86,309.4,-61.53],[101847,4.31,309.6,-1.105],[101867,4.81,309.6,21.2],[101958,3.77,309.9,15.91],[102098,1.25,310.4,45.28],[102281,4.43,310.9,15.07],[102333,4.51,311,-51.92],[102388,4.92,311.2,25.27],[102395,3.42,311.2,-66.2],[102422,3.41,311.3,61.84],[102431,4.52,311.3,57.58],[102453,4.22,311.4,30.72],[102485,4.13,311.5,-25.27],[102488,2.48,311.6,33.97],[102532,4.27,311.7,16.12],[102571,4.93,311.8,34.37],[102589,4.53,311.9,36.49],[102618,3.78,311.9,-9.496],[102624,4.43,311.9,-5.028],[102724,4.81,312.2,46.11],[102790,4.90,312.4,-46.23],[102831,4.89,312.5,-33.78],[102978,4.12,313,-26.92],[103004,4.56,313,27.1],[103045,4.73,313.2,-8.983],[103089,4.80,313.3,44.39],[103227,3.67,313.7,-58.45],[103413,3.94,314.3,41.17],[103632,4.74,315,47.52],[103738,4.67,315.3,-32.26],[104019,4.82,316.1,-19.85],[104060,3.72,316.2,43.93],[104139,4.08,316.5,-17.23],[104194,4.56,316.7,47.65],[104234,4.49,316.8,-25.01],[104459,4.50,317.4,-11.37],[104521,4.70,317.6,10.13],[104732,3.21,318.2,30.23],[104858,4.47,318.6,10.01],[104887,3.74,318.7,38.05],[104987,3.92,319,5.248],[105102,4.22,319.4,39.39],[105138,4.41,319.5,34.9],[105140,4.71,319.5,-32.17],[105199,2.45,319.6,62.59],[105319,4.39,320,-53.45],[105382,4.80,320.2,-40.81],[105502,4.08,320.5,19.8],[105515,4.28,320.6,-16.83],[105858,4.21,321.6,-65.37],[105881,3.77,321.7,-22.41],[106032,3.23,322.2,70.56],[106039,4.50,322.2,-21.81],[106140,4.52,322.5,23.64],[106278,2.90,322.9,-5.571],[106481,3.98,323.5,45.59],[106551,4.87,323.7,38.53],[106723,4.51,324.3,-19.47],[106786,4.68,324.4,-7.854],[106801,4.76,324.5,62.08],[106985,3.69,325,-16.66],[107089,3.73,325.4,-77.39],[107119,4.55,325.5,71.31],[107136,4.69,325.5,51.19],[107188,4.72,325.7,-18.87],[107259,4.23,325.9,58.78],[107310,4.49,326,28.74],[107315,2.38,326,9.875],[107348,4.34,326.1,17.35],[107354,4.14,326.2,25.65],[107380,4.35,326.2,-33.03],[107418,4.25,326.4,61.12],[107533,4.23,326.7,49.31],[107556,2.85,326.8,-16.13],[108085,3.00,328.5,-37.36],[108431,4.40,329.5,-54.99],[108870,4.69,330.8,-56.79],[108874,4.74,330.8,-2.155],[108917,4.26,330.9,64.63],[109068,4.86,331.4,5.059],[109074,2.95,331.4,-0.3199],[109111,4.47,331.5,-39.54],[109139,4.29,331.6,-13.87],[109176,3.77,331.8,25.35],[109268,1.73,332.1,-46.96],[109285,4.50,332.1,-32.99],[109289,4.99,332.1,-34.04],[109400,4.79,332.5,72.34],[109410,4.28,332.5,33.18],[109422,4.94,332.5,-32.55],[109427,3.52,332.5,6.198],[109492,3.39,332.7,58.2],[109754,4.50,333.5,39.71],[109857,4.18,333.8,57.04],[109908,4.79,333.9,-41.35],[109937,4.14,334,37.75],[110003,4.17,334.2,-7.783],[110130,2.87,334.6,-60.26],[110351,4.55,335.3,46.54],[110371,4.78,335.3,28.33],[110386,4.82,335.4,12.21],[110395,3.86,335.4,-1.387],[110538,4.42,335.9,52.23],[110609,4.55,336.1,49.48],[110672,4.80,336.3,1.377],[110838,4.51,336.8,-64.97],[110882,4.78,337,4.696],[110960,3.65,337.2,-0.01997],[110991,4.07,337.3,58.42],[110997,3.97,337.3,-43.5],[111022,4.34,337.4,47.71],[111043,4.12,337.4,-43.75],[111104,4.52,337.6,43.12],[111123,4.82,337.7,-10.68],[111169,3.76,337.8,50.28],[111188,4.29,337.9,-32.35],[111310,4.91,338.3,-61.98],[111497,4.04,338.8,-0.1175],[111674,4.64,339.3,51.55],[111841,4.89,339.8,39.05],[111944,4.50,340.1,44.28],[111954,4.18,340.2,-27.04],[112029,3.41,340.4,10.83],[112051,4.80,340.4,29.31],[112122,2.07,340.7,-46.88],[112158,2.93,340.8,30.22],[112203,4.84,340.9,-41.41],[112211,4.68,340.9,-18.83],[112374,4.84,341.4,-53.5],[112405,4.13,341.5,-81.38],[112440,3.97,341.6,23.57],[112447,4.20,341.7,12.17],[112519,4.77,341.9,83.15],[112623,3.49,342.1,-51.32],[112716,4.05,342.4,-13.59],[112724,3.50,342.4,66.2],[112748,3.51,342.5,24.6],[112917,4.95,343,43.31],[112948,4.46,343.1,-32.88],[112961,3.73,343.2,-7.58],[113116,4.70,343.6,84.35],[113136,3.27,343.7,-15.82],[113186,4.91,343.8,8.816],[113246,4.20,344,-32.54],[113288,4.99,344.1,49.73],[113368,1.17,344.4,-29.62],[113638,4.11,345.2,-52.75],[113726,3.62,345.5,42.33],[113881,2.44,345.9,28.08],[113889,4.48,346,3.82],[113919,4.64,346,50.05],[113963,2.49,346.2,15.21],[114104,4.84,346.7,59.42],[114119,4.48,346.7,-23.74],[114131,4.28,346.7,-43.52],[114144,4.54,346.8,9.409],[114155,4.76,346.8,25.47],[114222,4.41,347,75.39],[114341,3.68,347.4,-21.17],[114375,4.71,347.5,-22.46],[114421,3.88,347.6,-45.25],[114570,4.53,348.1,49.41],[114724,4.22,348.6,-6.049],[114855,4.24,349,-9.088],[114939,4.93,349.2,-7.727],[114971,3.70,349.3,3.282],[114996,3.99,349.4,-58.24],[115022,4.82,349.4,49.02],[115033,4.41,349.5,-9.183],[115088,4.75,349.7,68.11],[115102,4.41,349.7,-32.53],[115115,4.99,349.7,-9.611],[115250,4.58,350.2,23.74],[115438,3.96,350.7,-20.1],[115590,4.96,351.2,62.28],[115623,4.42,351.3,23.4],[115669,4.38,351.5,-20.64],[115738,4.95,351.7,1.256],[115830,4.27,352,6.379],[115919,4.54,352.3,12.76],[115990,4.89,352.5,58.55],[116231,4.38,353.2,-37.82],[116247,4.70,353.3,-20.91],[116310,4.97,353.5,31.33],[116389,4.69,353.8,-42.62],[116584,3.81,354.4,46.46],[116602,4.74,354.5,-45.49],[116631,4.29,354.5,43.27],[116727,3.21,354.8,77.63],[116758,4.97,354.9,-14.22],[116771,4.13,355,5.626],[116805,4.15,355.1,44.33],[116901,4.82,355.4,-17.82],[116928,4.49,355.5,1.78],[116971,4.49,355.7,-14.54],[117073,4.93,356,29.36],[117221,4.97,356.5,46.42],[117245,4.95,356.6,3.487],[117301,4.88,356.8,58.65],[117452,4.59,357.2,-28.13],[117863,4.51,358.6,57.5],[118131,4.63,359.4,25.14],[118209,4.88,359.7,-3.556],[118243,4.88,359.8,55.75],[118268,4.03,359.8,6.863],[118322,4.49,360,-65.58]];
	this.lines = [['Aquila',295,3.4106,98036,97649,97649,97278,97649,95501,95501,97804,99473,97804,95501,93747,93747,93244,95501,93805],['Andromeda',12.113,37.432,677,3092,3092,5447,9640,5447,5447,4436,4436,3881],['Sculptor',6.5667,-32.088,116231,4577,4577,115102,115102,116231],['Ara',260.62,-52,88714,85792,85792,83081,83081,82363,82363,85727,85727,85267,85267,85258,85258,88714],['Libra',227.99,-15.234,77853,76333,76333,74785,74785,72622,72622,73714,73714,76333],['Cetus',25.025,-7.1792,10324,11484,8102,3419,3419,1562,3419,5364,5364,6537,6537,8645,8645,11345,11345,12390,12390,12770,12770,11783,11783,8102,10826,12390,10826,12387,12387,12706,12706,14135,14135,13954,13954,12828,12828,11484,11484,12093,12093,12706],['Aries',39.538,20.792,13209,9884,9884,8903,8903,8832],['Scutum',280.1,-9.8886,92175,92202,92202,92814,92814,90595,90595,91117,91117,92175],['Pyxis',134.29,-27.352,42515,42828,42828,43409],['Bootes',220.66,31,71795,69673,69673,72105,72105,74666,74666,73555,73555,71075,71075,71053,71053,69673,69673,67927,67927,67459],['Caelum',73,-38,21060,21770,21770,21861],['Chamaeleon',160.38,-80,40702,51839,51839,60000],['Cancer',129.74,19.806,43103,42806,42806,40843,42806,42911,42911,40526,42911,44066],['Capricornus',315,-21,100064,100345,100345,104139,104139,105515,105515,106985,106985,107556,105515,105881,105881,104139,100345,102485,104139,102978],['Carina',130,-60,45238,50099,50099,52419,52419,52468,52468,54463,54463,53253,53253,51232,51232,50371,50371,45556,42568,41037,41037,30438,45080,45556,45080,42568,30438,31685,41037,39429],['Cassiopeia',19.788,62.184,8886,6686,6686,4427,4427,3179,3179,746],['Centaurus',196.07,-47.345,71683,68702,68702,66657,66657,68002,68002,68282,68282,67472,67472,67464,67464,65936,65936,65109,67464,68933,67472,71352,71352,73334,68002,61932,61932,60823,60823,59196,59196,56480,56480,56561],['Cepheus',340,71.008,109492,112724,112724,106032,106032,105199,105199,109492,112724,116727,116727,106032],['Coma Berenices',191.82,23.306,64241,64394,64394,60742],['Canes Venatici',196.74,40.102,61317,63125],['Auriga',91.104,42.028,28380,28360,28360,24608,24608,23453,23453,23015,25428,23015,25428,28380],['Columba',87.938,-35.094,30277,29807,29807,28199,28199,27628,27628,28328,27628,26634,26634,25859],['Circinus',225,-63,71908,75323,71908,74824],['Crater',170.94,-15.929,53740,54682,54682,55705,55705,55282,55282,53740,55282,55687,55687,56633,56633,58188,58188,57283,57283,55705],['Corona\nAustrina',280,-41,91875,92989,92989,93174,93174,93825,93825,94114,94114,94160,94160,94005,94005,93542,93542,92953,91875,90887],['Corona Borealis',237.65,32.625,76127,75695,75695,76267,76267,76952,76952,77512,77512,78159,78159,78493],['Corvus',186.63,-18.436,61174,60965,60965,59803,59803,59316,59316,59199,59316,61359,61359,60965],['Crux',186.75,-60.186,61084,60718,62434,59747],['Cygnus',308.82,44.545,94779,95853,95853,97165,97165,100453,100453,102098,100453,102488,102488,104732,104732,107310,100453,98110,98110,95947],['Delphinus',310.4,11.671,101421,101769,101769,101958,101958,102532,102532,102281,102281,101769],['Dorado',80,-65,27100,27890,27890,26069,26069,27100,26069,21281,21281,19893],['Draco',250,60,87585,87833,87833,85670,85670,85829,85829,87585,87585,94376,94376,97433,97433,89937,89937,83895,83895,80331,80331,78527,78527,75458,75458,68756,68756,61281,61281,56211],['Norma',240,-51.351,79509,80000,80000,80582,80582,78639,78639,80000,78639,79509],['Eridanus',63,-28.756,7588,9007,9007,10602,10602,11407,11407,12413,12413,12486,12486,13847,13847,15510,15510,17797,17797,17874,17874,20042,20042,20535,20535,21393,21393,17651,17651,16611,16611,15474,15474,14146,14146,12843,12843,13701,13701,15197,15197,16537,16537,17378,17378,21444,21444,22109,22109,22701,22701,23875,23875,23972,23972,21594],['Sagitta',294.76,18.861,96837,97365,97365,96757,97365,98337,98337,98920],['Fornax',41.967,-31.634,13147,14879],['Gemini',106.06,22.6,31681,34088,34088,35550,35550,35350,35350,32362,35550,36962,36962,37740,36962,37826,36962,36046,36046,34693,34693,36850,34693,33018,34693,32246,32246,30883,32246,30343,30343,29655,29655,28734],['Camelopardalis',90,70,16228,18505,18505,22783,16228,17959,17959,22783,17959,25110],['Canis Major',102.43,-22.14,33160,34045,34045,33347,33347,32349,32349,33977,33977,34444,34444,35037,35037,35904,33579,33856,33856,34444,33856,33165,33165,31592,31592,31416,31592,30324,31592,32349,33579,32759,30122,33579,33347,33160],['Ursa Major',160,50,67301,65378,65378,62956,62956,59774,59774,54061,54061,53910,53910,58001,58001,59774,58001,57399,57399,54539,54539,50372,54539,50801,53910,48402,48402,46853,46853,44471,46853,44127,48402,48319,48319,41704,41704,46733,46733,54061],['Grus',336.85,-46.352,114131,110997,110997,109268,109268,112122,112122,114421,114421,114131,112122,113638,112122,112623,109268,109111,109111,108085],['Hercules',260.79,27.499,86414,87808,87808,85112,85112,84606,84606,84380,84380,81833,81833,81126,81126,79992,79992,77760,81833,81693,81693,80816,80816,80170,81693,83207,83207,85693,85693,84379,86974,87933,87933,88794,87933,86974,83207,84380],['Horologium',49.138,-53.336,19747,12484,12484,14240],['Hydra',154,-20,42799,42402,42402,42313,42313,43109,43109,43234,43234,42799,43234,43813,43813,45336,45336,46776,46776,46509,46509,46390,46390,48356,48356,49841,49841,51069,51069,52943,52943,56343,56343,57936,57936,64166,64166,64962],['Hydrus',35.158,-69.956,2021,17678,17678,12394,12394,11001,11001,9236],['Indus',320,-55,105319,101772,101772,103227,103227,105319],['Lacerta',336.92,46.042,109937,111104,111104,111022,111022,110609,110609,110538,110538,111169,111169,111022],['Monoceros',105.9,0.28194,29651,30867,30867,34769,34769,30419,30419,29151,34769,39863,39863,37447],['Lepus',83.487,-19.046,28910,28103,28103,27288,27288,25985,25985,24305,25985,27654,27654,27072,27072,25606,25606,23685,25985,25606,24305,24845,24305,24327,23685,24305,24327,24244,24845,24873],['Leo',160,13.139,57632,54879,54879,49669,49669,49583,49583,50583,50583,54872,54872,57632,50583,50335,50335,48455,48455,47908,54872,54879],['Lupus',232,-42,77634,78970,78970,78384,78384,77634,78384,76297,76297,75141,75141,75177,75141,73273,76297,76552,76552,74395,74395,71860,74395,71536,71860,70576,71860,73273],['Lynx',119.88,47.467,45860,45688,45688,44700,44700,44248,44248,41075,41075,36145,36145,33449,33449,30060],['Lyra',282.79,36.689,91262,91971,91971,92420,92420,93194,93194,92791,92791,91971],['Antlia',155,-34,51172,48926],['Microscopium',314.47,-36.275,105140,103738,103738,102831],['Musca',188.82,-70.161,62322,57363,57363,61199,61199,61585,61585,62322],['Octans',320,-85,107089,112405,112405,70638,70638,107089],['Apus',242.16,-75.3,72370,81065,81065,81852],['Ophiuchus',258,-4,86032,86742,84012,86742,86032,83000,83000,79882,79882,81377,81377,84012,84012,85755],['Orion',83.646,6,26727,26311,26311,25930,28691,29426,29426,29038,29038,27913,29426,28614,28614,27989,27989,26727,26727,27366,27366,24436,24436,25930,25930,25336,25336,26207,26207,27989,25336,22449,22449,22549,22549,22730,22730,23123,22449,22509,22509,22845,29038,28614],['Pavo',294.18,-65.781,100751,105858,105858,102395,102395,99240,99240,100751,99240,98495,98495,91792,91792,93015,93015,99240,93015,92609,92609,90098,90098,88866,88866,92609,88866,86929],['Pegasus',340.46,19.466,1067,113963,113881,112158,112158,109352,113881,112748,112748,112440,112440,109176,109176,107354,113963,112447,112447,112029,112029,109427,109427,107315,677,113881,677,1067,113881,113963],['Pictor',85.612,-53.474,32607,27530,27530,27321],['Perseus',55,45,17448,18246,18246,18614,18614,18532,18532,17358,17358,15863,15863,14328,14328,13268,15863,14576,14576,14354,14354,13254],['Equuleus',317.81,7.7581,104521,104858,104858,105570,105570,104987,104987,104521],['Canis Minor',114.79,6.4269,37279,36188],['Leo Minor',153.68,32.134,53229,51233,51233,49593,49593,46952,49593,53229],['Vulpecula',305,25,95771,98543],['Ursa Minor',225,74,11767,85822,85822,82080,82080,77055,77055,79822,79822,75097,75097,72607,72607,77055],['Phoenix',13.975,-48.581,5348,5165,5165,2072,2072,5348,5165,7083,7083,8837,8837,5165,5165,6867,6867,2072,2072,2081,2081,765,765,2072],['Pisces',15,12,4889,5742,4889,6193,6193,5742,5742,7097,7097,8198,8198,9487,9487,8833,8833,7884,7884,7007,7007,4906,4906,3760,3760,1645,1645,118268,118268,116771,116771,116928,116928,115738,115738,114971,114971,115830,115830,116771],['Piscis Austrinus',334.27,-30.642,113368,111954,111954,108661,108661,107608,107608,109422,109422,111188,111188,113246],['Volans',116.93,-69.801,37504,34481,34481,39794,39794,37504,39794,35228,39794,41312,41312,44382,44382,39794],['Puppis',118,-30,39757,38146,38146,35264,35264,31685,31685,32768,32768,36377,36377,39429,39429,39757],['Reticulum',58.817,-59.998,19780,19921,19921,18597,18597,17440,17440,19780],['Sagittarius',286.48,-28.477,89931,90496,89642,90185,90185,88635,88635,87072,88635,89931,89931,90185,90185,93506,93506,92041,92041,89931,92041,90496,90496,89341,93506,93864,93864,92855,92855,92041,92855,93085,93085,93683,93683,94820,94820,95168,93864,96406,96406,98688,98688,98412,98412,98032,98032,95347,98032,95294],['Scorpius',250,-35,85927,86670,86670,87073,87073,86228,86228,84143,84143,82671,82671,82514,82514,82396,82396,81266,81266,80763,80763,78401,80763,78265,80763,78820],['Serpens',0,0,77516,77622,77622,77070,77070,76276,76276,77233,77233,78072,78072,77450,77450,77233,92946,89962,89962,86565,86565,86263,86263,84880],['Sextans',154.07,-2.6144,51437,49641],['Mensa',81.221,-77.504,25918,21949],['Taurus',65,14.877,25428,21881,21881,20889,21421,26451,20205,20455,20205,18724,18724,15900,21421,20889,21421,20894,20894,20205,20889,20648,20648,20455,20455,17847],['Telescopium',289.88,-51.037,90568,90422],['Tucana',0,-65,110130,114996,114996,1599,114996,2484],['Triangulum',30,32,10559,10064,10064,8796,8796,10559],['Triangulum\nAustrale',241.24,-65.388,82273,74946,74946,77952,77952,82273],['Aquarius',340,-10,106278,109074,109074,110395,110395,110960,110960,111497,111497,112961,112961,114855,114855,115438,109074,110003,110003,109139,110003,111123,111123,112716,112716,113136,113136,114341,102618,106278],['Virgo',201.1,-4.1583,57380,60030,60030,61941,61941,65474,65474,69427,69427,69701,69701,71957,65474,66249,66249,68520,68520,72220,66249,63090,63090,63608,63090,61941],['Vela',143.66,-47.167,39953,42536,42536,42913,42913,45941,45941,48774,48774,52727,52727,51986,51986,50191,50191,46651,46651,44816,44816,39953]];
	// Load in the planet data from separate json file
	this.planets = "http://lcogt.net/virtualsky/embed/planets.json";

	this.hipparcos = new Array();

	this.az_step = 0;
	this.az_off = 0;
	this.clock = new Date();
	this.fullsky = false;

	// Overwrite with input values
	this.init(input);

	// Constants
	this.d2r = Math.PI/180;

	this.pointers = new Array();
	this.dragging = false;
	this.x = "";
	this.y = "";
	this.theta = 0;
	this.sky_gradient;
	this.infobox = "virtualskyinfobox";

	if(this.id) this.createSky();
	if(this.islive) interval = setInterval(function(sky){ sky.setClock('now'); },1000,this);
}

VirtualSky.prototype.init = function(inp){
	
	if(!inp) return;
        var q = location.search;
	if(q && q != '#'){
		q = q.replace(/^\?/,''); // remove the leading ?
		q = q.replace(/\&$/,''); // remove the trailing &
		var bits = q.split('&');
		for(var i = 0; i < bits.length ; i++){
			var key = bits[i].split('=')[0];
			var val = bits[i].split('=')[1];
			// convert floats
			if(/^[0-9.\-]+$/.test(val)) val = parseFloat(val);
			if(val == "true") val = true;
			if(val == "false") val = false;
			if(typeof inp[key]=="undefined") inp[key] = val;
		}
	}

	// Overwrite defaults with variables passed to the function
	if(typeof inp.id=="string") this.id = inp.id;
	if(typeof inp.projection=="string") this.setProjection(inp.projection);
	if(typeof inp.gradient=="boolean") this.gradient = inp.gradient;
	if(typeof inp.cardinalpoints=="boolean") this.cardinalpoints = inp.cardinalpoints;
	if(typeof inp.negative=="boolean") this.negative = inp.negative;
	if(typeof inp.constellations=="boolean") this.constellations = inp.constellations;
	if(typeof inp.constellationlabels=="boolean") this.constellationlabels = inp.constellationlabels;
	if(typeof inp.showplanets=="boolean") this.showplanets = inp.showplanets;
	if(typeof inp.showorbits=="boolean") this.showorbits = inp.showorbits;
	if(typeof inp.showdate=="boolean") this.showdate = inp.showdate;
	if(typeof inp.showposition=="boolean") this.showposition = inp.showposition;
	if(typeof inp.keyboard=="boolean") this.keyboard = inp.keyboard;
	if(typeof inp.mouse=="boolean") this.mouse = inp.mouse;
	if(typeof inp.ground=="boolean") this.ground = inp.ground;
	if(typeof inp.gridlines_az=="boolean") this.gridlines_az = inp.gridlines_az;
	if(typeof inp.gridlines_eq=="boolean") this.gridlines_eq = inp.gridlines_eq;
	if(typeof inp.gridstep=="number") this.gridstep = inp.gridstep;
	if(typeof inp.magnitude=="number") this.magnitude = inp.magnitude;
	if(typeof inp.longitude=="number") this.longitude = inp.longitude;
	if(typeof inp.latitude=="number") this.latitude = inp.latitude;
	if(typeof inp.clock=="string") this.clock = new Date(inp.clock.replace(/%20/g,' '));
	if(typeof inp.clock=="object") this.clock = inp.clock;
	if(typeof inp.background=="string") this.background = inp.background;
	if(typeof inp.color=="string") this.color = inp.color;
	if(typeof inp.az=="number") this.az_off = (inp.az%360)-180;
	if(typeof inp.planets=="string" || typeof inp.planets=="object") this.planets = inp.planets;
	if(typeof inp.width=="number") this.width = inp.width;
	if(typeof inp.height=="number") this.height = inp.height;
	if(typeof inp.live=="boolean") this.islive = inp.live;
	if(typeof inp.callback=="object"){
		if(typeof inp.callback.geo=="function") this.callback.geo = inp.callback.geo;
		if(typeof inp.callback.mouseenter=="function") this.callback.mouseenter = inp.callback.mouseenter;
		if(typeof inp.callback.mouseout=="function") this.callback.mouseout = inp.callback.mouseout;
	}

}

VirtualSky.prototype.loadJavascript = function (jsname,pos) {
	this.num_js_toload++;
	var th = document.getElementsByTagName(pos)[0];
	var s = document.createElement('script');
	s.setAttribute('type','text/javascript');
	s.setAttribute('src',jsname);
	var _obj = this;
	th.appendChild(s);
	if(s.addEventListener) s.addEventListener('load',function(){ _obj.loadedJavascript(); },false);
	else if(s.attachEvent) s.attachEvent('onreadystatechange',function(){ _obj.loadedJavascript(); });
}

VirtualSky.prototype.loadedJavascript = function(){ this.num_js_loaded++; }

VirtualSky.prototype.loaded = function(){ return (this.num_js_loaded >= this.num_js_toload) ? true : false; }

VirtualSky.prototype.createSky = function(){
	// If the browser hasn't yet loaded the extra Javascript 
	// (e.g. jQuery/excanvas) that we've requested, we wait
	// for a moment and try again.
	if(!this.loaded()){
		// Have a little wait and try again
		var _obj = this;
		var timer_load = setTimeout(function(){ _obj.createSky(); },100);
		return;
	}
	var el = document.getElementById(this.id);

	// If the Javascript function has been passed a width/height
	// those take precedence over the CSS-set values
	if(typeof jQuery != 'undefined'){
		if(this.width > 0) $('#'+this.id).width(this.width);
		if(this.height > 0) $('#'+this.id).height(this.height);
		this.width = $('#'+this.id).width();
		this.height = $('#'+this.id).height();
	}
	if(el!=null){
		if(typeof el=="object" && el.tagName != "CANVAS"){
			// Looks like the element is a container for our <canvas>
			el.setAttribute('id',this.id+'holder');
			this.width = (el.offsetWidth) ? ''+parseInt(el.offsetWidth) : this.width;
			this.height = (el.offsetHeight) ? ''+parseInt(el.offsetHeight) : this.height;
			elcanvas = document.createElement('canvas');
			elcanvas.style.display='block';
			elcanvas.setAttribute('width',this.width);
			elcanvas.setAttribute('height',this.height);
			elcanvas.setAttribute('id',this.id);
			el.appendChild(elcanvas);
			// For excanvas we need to initialise the newly created <canvas>
			if(/*@cc_on!@*/false) el = G_vmlCanvasManager.initElement(elcanvas);
		}else{
			// Define the size of the canvas
			this.width = el.getAttribute('width');
			this.height = el.getAttribute('height');
			// Excanvas doesn't seem to attach itself to the existing
			// <canvas> so we make a new one and replace it.
			if(/*@cc_on!@*/false){
				elcanvas = document.createElement('canvas');
				elcanvas.style.display='block';
				elcanvas.setAttribute('width',this.width);
				elcanvas.setAttribute('height',this.height);
				elcanvas.setAttribute('id',this.id);
				el.parentNode.replaceChild(elcanvas,el);
				if(/*@cc_on!@*/false) el = G_vmlCanvasManager.initElement(elcanvas);
			}
		}
	}else{
		// No appropriate ID or <canvas> exists. So we'll make one.
		elcanvas = document.createElement('canvas');
		elcanvas.style.display='block';
		elcanvas.setAttribute('width',this.width);
		elcanvas.setAttribute('height',this.height);
		elcanvas.setAttribute('id',this.id);
		document.body.appendChild(elcanvas);
		el = elcanvas;
		// For excanvas we need to initialise the newly created <canvas>
		if(/*@cc_on!@*/false) G_vmlCanvasManager.initElement(elcanvas);
	}

	if(typeof this.planets=="string"){
		var _object = this;
		$.ajax({
			dataType: "json", 
			url: this.planets,
			context: _object,
			success: function(data){
				console.log(data)
				this.planets = data.planets;
				this.draw();
			}
		});
	}

	// Now set up the canvas
	this.canvas = document.getElementById(this.id);
	if(this.canvas && this.canvas.getContext){  
		this.ctx = this.canvas.getContext('2d');
		this.wide = this.canvas.getAttribute("width");
		this.tall = this.canvas.getAttribute("height");

		this.ctx.clearRect(0,0,this.wide,this.tall);
		this.ctx.beginPath();
		var fs = 12;
		this.ctx.font = fs+"px Helvetica";
		this.ctx.fillStyle = 'rgb(0,0,0)';
		this.ctx.lineWidth = 1.5;
		var loading = 'Loading sky...';
		this.ctx.fillText(loading,(this.width-this.ctx.measureText(loading).width)/2,(this.tall-fs)/2)
		this.ctx.fill();

		if(typeof jQuery != 'undefined'){
			if(this.mouse){
				$("#"+this.id).bind('click',{sky:this},function(e){
					var x = e.pageX - $(this).offset().left - window.scrollX;
					var y = e.pageY - $(this).offset().top - window.scrollY;
					matched = e.data.sky.whichPointer(x,y);
					e.data.sky.toggleInfoBox(matched);
					if(matched >= 0) $(e.data.sky.canvas).css({cursor:'pointer'});
				}).bind('mousemove',{sky:this},function(e){
					var sky = e.data.sky;
					// We don't need scrollX/scrollY as pageX/pageY seem to include this
					var x = e.pageX - $(this).offset().left;
					var y = e.pageY - $(this).offset().top;
					$(sky.canvas).css({cursor:'move'});
					if(sky.dragging){
						if(sky.projection == 'polar'){
							dx = x - sky.wide/2;
							dy = y - sky.tall/2;
							theta = Math.atan2(dy,dx);
							if(theta > sky.theta) sky.az_off += 2;
							else if(theta < sky.theta) sky.az_off -= 2;
							sky.az_off = sky.az_off%360;
							sky.theta = theta;
						}else{
							if(typeof sky.x=="number") sky.az_off += (sky.x-x)/2
							sky.az_off = sky.az_off%360;
						}
						sky.x = x;
						sky.y = y;
						sky.draw();
						$(sky.canvas).css({cursor:'-moz-grabbing'});
					}else{
						matched = sky.whichPointer(x,y);
						if(matched >= 0) $(sky.canvas).css({cursor:'pointer'});
						if(matched >= 0) sky.toggleInfoBox(matched);
					}	
				}).bind('mousedown',{sky:this},function(e){
					e.data.sky.dragging = true;
				}).bind('mouseup',{sky:this},function(e){
					e.data.sky.dragging = false;
					e.data.sky.x = "";
				}).bind('mouseout',{sky:this},function(e){
					e.data.sky.dragging = false;
					e.data.sky.mouseover = false;
					e.data.sky.x = "";
					if(typeof e.data.sky.callback.mouseout=="function") e.data.sky.callback.mouseout.call(e.data.sky);
				}).bind('mouseenter',{sky:this},function(e){
					e.data.sky.mouseover = true;
					if(typeof e.data.sky.callback.mouseenter=="function") e.data.sky.callback.mouseenter.call(e.data.sky);
				});
			}
			if(this.keyboard){
				$(document).bind('keypress',{sky:this},function(e){
					if(!e) e=window.event;
					sky = e.data.sky;
					if(sky.mouseover && sky.keyboard){
						var code = e.keyCode || e.charCode || e.which || 0;
						var c = String.fromCharCode(code).toLowerCase();
						if(c == 'a') sky.toggleAtmosphere();
						else if(c == 'c') sky.toggleConstellationLines();
						else if(c == 'v') sky.toggleConstellationLabels();
						else if(c == 'p') sky.togglePlanetHints();
						else if(c == 'o') sky.toggleOrbits();
						else if(c == 'z') sky.toggleGridlinesAzimuthal();
						else if(c == 'e') sky.toggleGridlinesEquatorial();
						else if(c == 'g') sky.toggleGround();
						else if(c == 'i') sky.toggleNegative();
						else if(c == 'q') sky.toggleCardinalPoints();
						else if(c == 'l') sky.spinIt("up");
						else if(c == 'j') sky.spinIt("down");
						else if(c == 'k') sky.spinIt(0);
						else if(c == 'n') sky.setClock('now');
						// down == 38, up == 40
						if(code == 37){	// left
							sky.az_off -= 2;
							sky.draw();
						}else if(code == 39){	// right
							sky.az_off += 2;
							sky.draw();
						}else if(code == 107 || code == 61 || code == 187 || code == 33){	// + (107 for Firefox, 187 for Safari, 33 for pageup)
							sky.magnitude += 0.2;
							sky.draw();
						}else if(code == 109 || code == 189 || code == 34){	// - (109 for Firefox, 189 for Safari, 34 for pagedown)
							sky.magnitude -= 0.2;
							sky.draw();
						}
					}
				});
			}
		}
	}
	this.draw();
}

VirtualSky.prototype.processPlanets = function(data) {
	//alert('Success '+this.id);
	this.planets = data.planets;
	this.draw();
}
		
VirtualSky.prototype.whichPointer = function(x,y){
	for(i = 0 ; i < this.pointers.length ; i++){
		if(Math.abs(x-this.pointers[i].x) < 5 && Math.abs(y-this.pointers[i].y) < 5) return i
	}
	return -1;
}

VirtualSky.prototype.toggleInfoBox = function(i){
	if($('#'+this.infobox).length <= 0) $('body').append('<div id="'+this.infobox+'" style="display:none;"></div>');
	$('#'+this.infobox).css({'background-color':'rgba(200,200,200,1)',color:'black',padding:'5px','border-radius':'0.5em','-moz-border-radius': '0.5em','-webkit-border-radius': '0.5em','box-shadow':'0px 0px 20px rgba(255,255,255,0.5)','-moz-box-shadow':'0px 0px 20px rgba(255,255,255,0.5)','-webkit-box-shadow':'0px 0px 20px rgba(255,255,255,0.5)'});
	if(i >= 0 && i < this.pointers.length && this.isVisible(this.pointers[i].el) && this.pointers[i].x > 0 && this.pointers[i].y > 0 && this.pointers[i].x < this.wide && this.pointers[i].y < this.tall){
		var offset = $('#'+this.id).offset();
		var url = (this.pointers[i].url) ? this.pointers[i].url : "http://server1.wikisky.org/v2?ra="+(this.pointers[i].ra/15)+"&de="+(this.pointers[i].dec)+"&zoom=6&img_source=DSS2";
		var img = (this.pointers[i].img) ? this.pointers[i].img : 'http://server7.sky-map.org/imgcut?survey=DSS2&w=128&h=128&ra='+(this.pointers[i].ra/15)+'&de='+this.pointers[i].dec+'&angle=0.625&output=PNG';
		var credit = (this.pointers[i].credit) ? this.pointers[i].credit : "Wikisky";
		var label = (this.pointers[i].label) ? this.pointers[i].label : "View in Wikisky";
		if(label && credit) label = label+' ('+credit+')';
		var html = (this.pointers[i].html) ? this.pointers[i].html : '<div class="virtualskyinfocredit">Credit: <a href="'+url+'" style="color: white;">'+credit+'<\/a><\/div><a href="'+url+'"><img src="'+img+'" style="border:0px;" title="'+label+'" \/><\/a>';
		$('#'+this.infobox).html(html);
		var x = this.pointers[i].x+5;
		var y = this.pointers[i].y+5;
		var w = $('#'+this.infobox).outerWidth();
		var h = $('#'+this.infobox).outerHeight();
		if(x+w > this.wide) x = this.pointers[i].x-w-5;
		if(y+h > this.tall) y = this.pointers[i].y-h-5;
		x += offset.left;
		y += offset.top;
		$('#'+this.infobox).css({'position':'absolute',left:(x),top:(y)}).fadeIn("fast");
	}else{
		$('#'+this.infobox).hide();
	}
}

VirtualSky.prototype.centreDiv = function(id){
	var off = $('#'+this.id).offset();
	var w = $('#'+id).outerWidth();
	var h = $('#'+id).outerHeight();
	$('#'+id).css({position:'absolute',top:(off.top+(this.tall-h)/2),left:(off.left+(this.wide-w)/2)});
}

// compute horizon coordinates from utc, ra, dec
// ra, dec, lat, lon in  degrees
// utc is a Date object
// results returned in hrz_altitude, hrz_azimuth
VirtualSky.prototype.coord2horizon = function(ra, dec){
	var utc = this.now;
	// compute hour angle in degrees
	var times = this.astronomicalTimes();
	var ha = times.LST*15 - ra;
	if (ha < 0) ha += 360;

	// convert degrees to radians
	ha *= this.d2r;
	dec *= this.d2r;
	// Fudge to fix divide by zero error at poles
	var lat = (Math.abs(this.latitude) == 90.0) ? (this.latitude-0.00001)*this.d2r : this.latitude*this.d2r;

	// compute altitude in radians
	var alt = Math.asin(Math.sin(dec)*Math.sin(lat) + Math.cos(dec)*Math.cos(lat)*Math.cos(ha));

	// compute azimuth in radians
	// divide by zero error at poles or if alt = 90 deg
	var az  = Math.acos((Math.sin(dec) - Math.sin(alt)*Math.sin(lat))/(Math.cos(alt)*Math.cos(lat)));

	// convert radians to degrees
	var hrz_altitude = alt/this.d2r;
	var hrz_azimuth  = az/this.d2r;

	// choose hemisphere
	if (Math.sin(ha) > 0) hrz_azimuth = 360 - hrz_azimuth;

	return [hrz_altitude,hrz_azimuth];
}

VirtualSky.prototype.setProjection = function(proj){
	this.projection = proj;
	this.fullsky = (proj == "mollweide" || proj == "planechart");
}

VirtualSky.prototype.isVisible = function(el){
	if(!this.fullsky) return (el > 0);
	else return (this.ground) ? (el > 0) : true;
}

// Return a structure with the Julian Date, Local Sidereal Time and Greenwich Sidereal Time
VirtualSky.prototype.astronomicalTimes = function(){
	JD = this.getJD(this.now);
	JD0 = Math.floor(JD-0.5)+0.5;
	S = JD0-2451545.0;
	T = S/36525.0;
	T0 = (6.697374558 + (2400.051336*T) + (0.000025862*T*T))%24;
	if(T0 < 0) T0 += 24;
	UT = (((this.now.getUTCMilliseconds()/1000 + this.now.getUTCSeconds())/60) + this.now.getUTCMinutes())/60 + this.now.getUTCHours();
	A = UT*1.002737909;
	T0 += A;
	GST = T0%24;
	if(GST < 0) GST += 24;
	d = (GST + this.longitude/15.0)/24.0;
	d = d - Math.floor(d);
	if(d < 0) d += 1;
	LST = 24.0*d;
	return { GST:GST, LST:LST, JD:JD };
}

// Uses algorithm defined in Practical Astronomy (4th ed) by Peter Duffet-Smith and Jonathan Zwart
VirtualSky.prototype.moonPos = function(JD,sun){
	d2r = Math.PI/180;
	if(!sun) sun = this.sunPos(JD);
	lo = 91.929336;	// Moon's mean longitude at epoch 2010.0
	Po = 130.143076;	// mean longitude of the perigee at epoch
	No = 291.682547;	// mean longitude of the node at the epoch
	i = 5.145396;	// inclination of Moon's orbit
	e = 0.0549;	// eccentricity of the Moon's orbit
	l = (13.1763966*sun.D + lo)%360;
	if(l < 0) l += 360;
	Mm = (l - 0.1114041*sun.D - Po)%360;
	if(Mm < 0) Mm += 360;
	N = (No - 0.0529539*sun.D)%360;
	if(N < 0) N += 360;
	C = l-sun.lon;
	Ev = 1.2739*Math.sin((2*C-Mm)*d2r);
	sinMo = Math.sin(sun.Mo*d2r);
	Ae = 0.1858*sinMo;
	A3 = 0.37*sinMo;
	Mprimem = Mm + Ev -Ae - A3;
	Ec = 6.2886*Math.sin(Mprimem*d2r);
	A4 = 0.214*Math.sin(2*Mprimem*d2r);
	lprime = l + Ev + Ec -Ae + A4;
	V = 0.6583*Math.sin(2*(lprime-sun.lon)*d2r);
	lprimeprime = lprime + V;
	Nprime = N - 0.16*sinMo;
	lppNp = (lprimeprime-Nprime)*d2r;
	sinlppNp = Math.sin(lppNp);
	y = sinlppNp*Math.cos(i*d2r);
	x = Math.cos(lppNp);
	lm = Math.atan2(y,x)/d2r + Nprime;
	Bm = Math.asin(sinlppNp*Math.sin(i*d2r))/d2r;
	return { moon: {lon:lm,lat:Bm}, sun:sun };
}

// Uses algorithm defined in Practical Astronomy (4th ed) by Peter Duffet-Smith and Jonathan Zwart
VirtualSky.prototype.sunPos = function(JD){
	D = (JD-2455196.5);	// Number of days since the epoch of 2010 January 0.0
	// Calculated for epoch 2010.0. If T is the number of Julian centuries since 1900 January 0.5 = (JD-2415020.0)/36525
	eg = 279.557208;	// mean ecliptic longitude in degrees = (279.6966778 + 36000.76892*T + 0.0003025*T*T)%360;
	wg = 283.112438;	// longitude of the Sun at perigee in degrees = 281.2208444 + 1.719175*T + 0.000452778*T*T;
	e = 0.016705;	// eccentricity of the Sun-Earth orbit in degrees = 0.01675104 - 0.0000418*T - 0.000000126*T*T;
	N = ((360/365.242191)*D)%360;
	if(N < 0) N += 360;
	Mo = (N + eg - wg)%360	// mean anomaly in degrees
	if(Mo < 0) Mo += 360;
	v = Mo + (360/Math.PI)*e*Math.sin(Mo*Math.PI/180);
	lon = v + wg;
	if(lon > 360) lon -= 360;
	lat = 0;
	return {lat:lat,lon:lon,Mo:Mo,D:D,N:N}
}

// Input is Julian Date
// Uses method defined in Practical Astronomy (4th ed) by Peter Duffet-Smith and Jonathan Zwart
VirtualSky.prototype.meanObliquity = function(JD){
	if(!JD) JD = this.jd;
	T = (JD-2451545.0)/36525	// centuries since 2451545.0 (2000 January 1.5)
	T2 = T*T;
	T3 = T2*T;
	return 23.4392917 - 0.0130041667*T - 0.00000016667*T2 + 0.0000005027778*T3;
}

// Take input in decimal degrees, decimal Sidereal Time and decimal latitude
// Uses method defined in Practical Astronomy (4th ed) by Peter Duffet-Smith and Jonathan Zwart
VirtualSky.prototype.ecliptic2azel = function(l,b,LST,lat){
	if(!LST){
		times = this.astronomicalTimes();
		LST = times.LST;
	}
	if(!lat) lat = this.latitude
	l *= this.d2r;
	b *= this.d2r;
	var sl = Math.sin(l);
	var cl = Math.cos(l);
	var sb = Math.sin(b);
	var cb = Math.cos(b);
	var v = [cl*cb,sl*cb,sb];
	var e = this.meanObliquity();
	e *= d2r;
	ce = Math.cos(e);
	se = Math.sin(e);
	var Cprime = [[1.0,0.0,0.0],[0.0,ce,-se],[0.0,se,ce]];
	var s = this.vectorMultiply(Cprime,v);
	ST = LST*15*this.d2r;
	var cST = Math.cos(ST);
	var sST = Math.sin(ST);
	var B = [[cST,sST,0],[sST,-cST,0],[0,0,1]];
	var r = this.vectorMultiply(B,s);
	lat *= this.d2r;
	var sphi = Math.sin(lat);
	var cphi = Math.cos(lat);
	var A = [[-sphi,0,cphi],[0,-1,0],[cphi,0,sphi]];
	var w = this.vectorMultiply(A,r);
	var theta = Math.atan2(w[1],w[0]);
	var psi = Math.asin(w[2]);
	return {az:theta/this.d2r,el:psi/this.d2r}
}

// Take input in decimal degrees
VirtualSky.prototype.ecliptic2radec = function(l,b,JD){
	var e = this.meanObliquity();
	l *= this.d2r;
	b *= this.d2r;
	e *= this.d2r;
	var sl = Math.sin(l);
	var cl = Math.cos(l);
	var sb = Math.sin(b);
	var cb = Math.cos(b);
	var tb = Math.tan(b);
	var se = Math.sin(e);
	var ce = Math.cos(e);
	ra = Math.atan2((sl*ce - tb*se),(cl));
	dec = Math.asin(sb*ce+cb*se*sl);

	return { ra:ra/this.d2r, dec:dec/this.d2r };
}

// Returns [x, y (,elevation)]
VirtualSky.prototype.ecliptic2xy = function(l,b,LST){
	if(this.projection == "mollweide" || this.projection == "planechart"){
		var pos = this.ecliptic2radec(l,b);
		return this.radec2xy(pos.ra,pos.dec);
	}else{
		var pos = this.ecliptic2azel(l,b,LST);
		el = pos.el;
		pos = this.azel2xy(pos.az-this.az_off,pos.el,this.wide,this.tall);
		pos.el = el;
		return pos;
	}
	return 0;
}

// Returns [x, y (,elevation)]
VirtualSky.prototype.radec2xy = function(ra,dec){
	if(this.projection == "mollweide"){
		var thetap = Math.abs(dec)*this.d2r;
		var dtheta;
		var pisindec = Math.PI*Math.sin(Math.abs(dec)*this.d2r);
		// Now iterate to correct answer
		for(var i = 0; i < 20 ; i++){
			dtheta = -(thetap + Math.sin(thetap) - pisindec)/(1+Math.cos(thetap));
			thetap += dtheta;
			if(dtheta < 1e-4) break;
		}
		var normra = (ra+this.az_off)%360 - 180;
		x = -(2/Math.PI)*(normra*this.d2r)*Math.cos(thetap/2)*this.tall/2 + this.wide/2;
		var sign = (dec >= 0) ? 1 : -1;
		y = -sign*Math.sin(thetap/2)*this.tall/2 + this.tall/2;
		var coords = this.coord2horizon(ra, dec);
		return {x:x%this.wide,y:y,el:coords[0]};
	}else if(this.projection == "planechart"){
		var normra = (ra+this.az_off)%360-180;
		x = -(normra/360)*this.tall*2 + this.wide/2;
		y = -(dec/180)*this.tall+ this.tall/2;
		var coords = this.coord2horizon(ra, dec);
		return {x:x%this.wide,y:y,el:coords[0]};
	}else{
		var coords = this.coord2horizon(ra, dec);
		// Only return coordinates above the horizon
		if(coords[0] > 0){
			pos = this.azel2xy(coords[1]-this.az_off,coords[0],this.wide,this.tall);
			return {x:pos.x,y:pos.y,az:coords[1],el:coords[0]};
		}
	}
	return 0;
}

VirtualSky.prototype.azel2xy = function(az,el){
	var w = this.wide;
	var h = this.tall;
	var x,y;
	if(az < 0) az += 360;

	if(this.projection == "stereo"){
		var sinel1 = Math.sin(0);
		var cosel1 = Math.cos(0);
		var cosaz = Math.cos((az-180)*this.d2r);
		var sinaz = Math.sin((az-180)*this.d2r);
		var sinel = Math.sin(el*this.d2r);
		var cosel = Math.cos(el*this.d2r);
		var k = 2/(1+sinel1*sinel+cosel1*cosel*cosaz)
		x = w/2+0.42*k*h*cosel*sinaz;
		y = h-0.42*k*h*(cosel1*sinel-sinel1*cosel*cosaz);
	}else if(this.projection == "lambert"){
		var cosaz = Math.cos((az-180)*this.d2r);
		var sinaz = Math.sin((az-180)*this.d2r);
		var sinel = Math.sin(el*this.d2r);
		var cosel = Math.cos(el*this.d2r);
		var k = Math.sqrt(2/(1+cosel*cosaz));
		x = w/2+0.6*h*k*cosel*sinaz;
		y = h-0.6*h*k*(sinel);
	}else if(this.projection == "polar"){
		var radius = h/2;
		var r = radius*(90-el)/90
		y = radius-r*Math.cos(az*this.d2r);
		x = w/2-r*Math.sin(az*this.d2r);
	}else if(this.projection == "equirectangular"){
		x = ((az-180)/90)*h + w/2;
		y = h-(el/90)*h;
	}else{
		x = 0;
		y = 0;
	}
	return {x:x,y:y};
}

VirtualSky.prototype.vectorMultiply = function(A,B){
	if(B.length > 0){
		// 2D or 1D
		if(B[0].length > 0) return [[(A[0][0]*B[0][0]+A[0][1]*B[1][0]+A[0][2]*B[2][0]),(A[0][0]*B[0][1]+A[0][1]*B[1][1]+A[0][2]*B[2][1]),(A[0][0]*B[0][2]+A[0][1]*B[1][2]+A[0][2]*B[2][2])],[(A[1][0]*B[0][0]+A[1][1]*B[1][0]+A[1][2]*B[2][0]),(A[1][0]*B[0][1]+A[1][1]*B[1][1]+A[1][2]*B[2][1]),(A[1][0]*B[0][2]+A[1][1]*B[1][2]+A[1][2]*B[2][2])],[(A[2][0]*B[0][0]+A[2][1]*B[1][0]+A[2][2]*B[2][0]),(A[2][0]*B[0][1]+A[2][1]*B[1][1]+A[2][2]*B[2][1]),(A[2][0]*B[0][2]+A[2][1]*B[1][2]+A[2][2]*B[2][2])]];
		else return [(A[0][0]*B[0] + A[0][1]*B[1] + A[0][2]*B[2]),(A[1][0]*B[0] + A[1][1]*B[1] + A[1][2]*B[2]),(A[2][0]*B[0] + A[2][1]*B[1] + A[2][2]*B[2])];
	}
}

VirtualSky.prototype.draw = function(proj){
	if(typeof proj!="undefined") this.projection = proj;
	if(typeof jQuery != 'undefined') $('#'+this.infobox).hide();

	if(this.canvas && this.canvas.getContext){  

		var white = "rgb(255,255,255)";
		var black = "rgb(0,0,0)";
		var grey = "rgb(100,100,100)";

		this.ctx.moveTo(0,0);

		this.ctx.clearRect(0,0,this.wide,this.tall);
		this.ctx.fillStyle = (this.projection == "polar" || this.projection == "mollweide" || this.projection == "planechart") ? this.background : ((this.negative) ? white : black);
		this.ctx.fillRect(0,0,this.wide,this.tall);
		this.ctx.fill();

		if(this.projection == "polar"){
			this.ctx.moveTo(this.wide/2,this.tall/2);
			this.ctx.closePath();
			this.ctx.beginPath();
			this.ctx.arc(this.wide/2,this.tall/2,-0.5+this.tall/2,0,Math.PI*2,true);
			this.ctx.closePath();
			this.ctx.fillStyle = (this.gradient && !this.negative) ? "rgba(0,15,30, 1)" : ((this.negative) ? white : black);
			this.ctx.fill();
			this.ctx.lineWidth = 0.5;
			this.ctx.strokeStyle = 'rgb(0,0,0)';
			this.ctx.stroke();
		}else if(this.projection == "mollweide"){
			this.ctx.moveTo(this.wide/2,this.tall/2);
			this.ctx.beginPath();
			var x = this.wide/2-this.tall;
			var y = 0;
			var w = this.tall*2;
			var h = this.tall;
			var kappa = 0.5522848;
			var ox = (w / 2) * kappa; // control point offset horizontal
			var oy = (h / 2) * kappa; // control point offset vertical
			var xe = x + w;           // x-end
			var ye = y + h;           // y-end
			var xm = x + w / 2;       // x-middle
			var ym = y + h / 2;       // y-middle
			this.ctx.moveTo(x, ym);
			this.ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
			this.ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
			this.ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
			this.ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
			this.ctx.closePath();
			this.ctx.fillStyle = (this.gradient && !this.negative) ? "rgba(0,15,30, 1)" : ((this.negative) ? white : black);
			this.ctx.fill();			
		}else if(this.projection == "planechart"){
			this.ctx.fillStyle = (this.gradient && !this.negative) ? "rgba(0,15,30, 1)" : ((this.negative) ? white : black);
			this.ctx.fillRect((this.wide/2) - (this.tall),0,this.tall*2,this.tall);
			this.ctx.fill();			
		}

		this.now = this.clock;

		if(this.constellations || this.constellationlabels) this.drawConstellationLines()

		tmp = this.ctx.fillStyle;
		this.ctx.beginPath();
		if(this.gradient && this.projection != "polar" && this.projection != "mollweide" && this.projection != "planechart" && !this.negative){
			if(typeof this.sky_gradient == "undefined"){
				this.sky_gradient = this.ctx.createLinearGradient(0,0,0,this.tall);
				this.sky_gradient.addColorStop(0.0, 'rgba(0,30,50,0.1)');  
				this.sky_gradient.addColorStop(0.7, 'rgba(0,30,50,0.35)');  
				this.sky_gradient.addColorStop(1, 'rgba(0,50,80,0.6)');
			}
			this.ctx.fillStyle = this.sky_gradient;
			// draw shapes
			this.ctx.fillRect(0,0,this.wide,this.tall);
			this.ctx.fill();
		}

		this.drawStars();
		if(this.showplanets || this.showorbits) this.drawPlanets()
		for(i = 0; i < this.pointers.length ; i++) this.highlight(i);
		if(this.cardinalpoints) this.drawCardinalPoints()
		if(this.gridlines_az) this.drawGridlines("az");
		if(this.gridlines_eq) this.drawGridlines("eq");

		var txtcolour = (this.color!="") ? (this.color) : ((this.negative) ? black : white);
		if(this.projection == "polar" || this.projection == "mollweide") txtcolour = (this.color!="") ? txtcolour : grey;

		fontsize = (this.wide < 350) ? ((this.wide < 300) ? ((this.wide < 250) ? 9 : 10) : 11) : 12;
		
		// Time line
		if(this.showdate){
			var clockstring = this.clock.toDateString()+' '+this.clock.toLocaleTimeString();
			this.ctx.beginPath(); 
			this.ctx.font = fontsize+"px Helvetica";
			this.ctx.fillStyle = txtcolour;
			this.ctx.lineWidth = 1.5;
			this.ctx.fillText(clockstring,5,5+fontsize)
			this.ctx.fill();
			var metric_clock = this.ctx.measureText(clockstring).width;
		}

		// Position line
		if(this.showposition){
			var positionstring = Math.abs(this.latitude).toFixed(2) + ((this.latitude>0) ? 'N' : 'S') + ', ' + Math.abs(this.longitude).toFixed(2) + ((this.longitude>0) ? 'E' : 'W');
			this.ctx.beginPath(); 
			this.ctx.font = fontsize+"px Helvetica";
			this.ctx.fillStyle = txtcolour;
			this.ctx.lineWidth = 1.5;
			this.ctx.fillText(positionstring,5,5+fontsize+fontsize)
			this.ctx.fill();
			var metric_pos = this.ctx.measureText(positionstring).width;
		}

		// Credit line
		var credit = 'Powered by LCOGT';
		this.ctx.beginPath(); 
		this.ctx.font = fontsize+"px Helvetica";
		this.ctx.fillStyle = txtcolour;
		this.ctx.lineWidth = 1.5;
		this.ctx.fillText(credit,5,this.tall-5)
		this.ctx.fill();
		var metric_credit = this.ctx.measureText(credit).width;
		// Float a transparent link on top of the credit text
		if(typeof jQuery != 'undefined') {
			if($('#'+this.id+'_credit').length == 0){
				$('body').append('<div id="'+this.id+'_credit"><a href="http://lcogt.net/virtualsky" style="width:'+metric_credit+'px;height:'+fontsize+'px;display:block;color:red;background-color: transparent;" title="Created by the Las Cumbres Observatory Global Telescope"></a></div>');
				var off = $('#'+this.id).offset();
				$('#'+this.id+'_credit').css({position:'absolute',padding:0,top:off.top+parseFloat(this.tall)-5-fontsize,left:off.left+5,zIndex:20,display:'block',overflow:'hidden',backgroundColor:'transparent'})
			}
			if($('#'+this.id+'_clock').length == 0){
				$('body').append('<div id="'+this.id+'_clock" title="Change the date/time"></div>');
				var off = $('#'+this.id).offset();
				$('#'+this.id+'_clock').css({position:'absolute',padding:0,width:metric_clock,height:fontsize,cursor:'pointer',top:off.top+5,left:off.left+5,zIndex:20,display:'block',overflow:'hidden',backgroundColor:'transparent'})
				$('#'+this.id+'_clock').bind('click',{sky:this},function(e){
					var id = e.data.sky.id;
					if($('#'+id+'_calendar').length == 0){
						var off = $('#'+id).offset();
						var w = 290;
						var h = 50;
						if(e.data.sky.wide < w) w = e.data.sky.wide;
						$('body').append('<div id="'+id+'_calendar"><div style="float:right;font-size:'+fontsize+'px;padding-left:4px;padding-right:4px;border:1px solid #bbb;cursor:pointer;" id="'+id+'_calendar_close" title="close">&times;</div><div style="text-align:center;margin:2px;">Date &amp; Time</div><input type="text" id="'+id+'_year" style="width:4em;" value="" /><div class="divider">/</div><input type="text" id="'+id+'_month" style="width:2em;" value="" /><div class="divider">/</div><input type="text" id="'+id+'_day" style="width:2em;" value="" /><div class="divider">&nbsp;</div><input type="text" id="'+id+'_hours" style="width:2em;" value="" /><div class="divider">:</div><input type="text" id="'+id+'_mins" style="width:2em;" value="" /></div>');
						$('#'+id+'_calendar').css({position:'absolute',fontSize:'20px',padding:0,width:w,top:(off.top+(e.data.sky.tall-h)/2),left:(off.left+(e.data.sky.wide-w)/2),zIndex:20,fontSize:fontsize+'px',display:'block',overflow:'hidden',backgroundColor:'#ddd',padding:5,'box-shadow':'0px 0px 20px rgba(255,255,255,0.6)','-moz-box-shadow':'0px 0px 20px rgba(255,255,255,0.6)','-webkit-box-shadow':'0px 0px 20px rgba(255,255,255,0.6)','border-radius':'0.2em','-moz-border-radius':'0.2em','-webkit-border-radius': '0.2em'})
						$('#'+id+'_calendar input').css({display:'block',fontSize:'20px',border:'1px solid black','text-align':'center','float':'left','margin-right':2});
						$('#'+id+'_calendar .divider').css({display:'block',fontSize:'20px','text-align':'center','float':'left','margin-right':2,'margin-top':5});
						$('#'+id+'_calendar_close').hover(function(){ $(this).css({color:'white'}); },function(){ $(this).css({color:'black'}); });
						$('#'+id+'_calendar_close').bind('click',{sky:e.data.sky},function(e){
							e.data.sky.clock = new Date(parseInt($('#'+id+'_year').val()), parseInt($('#'+id+'_month').val()-1), parseInt($('#'+id+'_day').val()), parseInt($('#'+id+'_hours').val()), parseInt($('#'+id+'_mins').val()), 0,0);
							e.data.sky.draw();
							$('#'+id+'_calendar').hide();
						});
						$('#'+id+'_calendar').show();
					}else $('#'+id+'_calendar').toggle();
					$('#'+id+'_year').val(e.data.sky.clock.getFullYear())
					$('#'+id+'_month').val(e.data.sky.clock.getMonth()+1)
					$('#'+id+'_day').val(e.data.sky.clock.getDate())
					$('#'+id+'_hours').val(e.data.sky.clock.getHours())
					$('#'+id+'_mins').val(e.data.sky.clock.getMinutes());
				});
			}
			if($('#'+this.id+'_position').length == 0){
				$('body').append('<div id="'+this.id+'_position" title="Change the longitude/latitude"></div>');
				var off = $('#'+this.id).offset();
				$('#'+this.id+'_position').css({position:'absolute',padding:0,width:metric_pos,height:fontsize,cursor:'pointer',top:off.top+5+fontsize,left:off.left+5,zIndex:20,fontSize:fontsize+'px',display:'block',overflow:'hidden',backgroundColor:'transparent'})
				$('#'+this.id+'_position').bind('click',{sky:this},function(e){
					var id = e.data.sky.id;
					if($('#'+id+'_geo').length == 0){
						var w = 290;
						var h = 50;
						var narrow = '';
						if(e.data.sky.wide < w){
							narrow = '<br style="clear:both;margin-top:20px;" />';
							w = w/2;
						}
						$('body').append('<div id="'+id+'_geo"><div style="float:right;font-size:'+fontsize+'px;padding-left:4px;padding-right:4px;border:1px solid #bbb;cursor:pointer;" id="'+id+'_geo_close" title="close">&times;</div><div style="text-align:center;margin:2px;">Latitude &amp; Longitude</div><input type="text" id="'+id+'_lat" value="" style="padding-right:10px!important;"><div class="divider">N</div>'+narrow+'<input type="text" id="'+id+'_long" value="" /><div class="divider">E</div><br /><br /></div>');
						$('#'+id+'_geo').css({position:'absolute',padding:0,width:w,zIndex:20,fontSize:fontsize+'px',display:'block',overflow:'hidden',backgroundColor:'#ddd',padding:5,'box-shadow':'0px 0px 20px rgba(255,255,255,0.6)','-moz-box-shadow':'0px 0px 20px rgba(255,255,255,0.6)','-webkit-box-shadow':'0px 0px 20px rgba(255,255,255,0.6)','border-radius':'0.2em','-moz-border-radius':'0.2em','-webkit-border-radius': '0.2em'})
						e.data.sky.centreDiv(id+'_geo');
						$('#'+id+'_geo input').css({display:'block',fontSize:'20px',border:'1px solid black','text-align':'center','float':'left',width:'6em','margin-right':2});
						$('#'+id+'_geo .divider').css({display:'block',fontSize:'20px','text-align':'center','float':'left','margin-right':2,'margin-top':5});
						$('#'+id+'_geo_close').hover(function(){ $(this).css({color:'white'}); },function(){ $(this).css({color:'black'}); });
						$('#'+id+'_geo_close').bind('click',{sky:e.data.sky},function(e){
							e.data.sky.latitude = parseFloat($('#'+id+'_lat').val())
							e.data.sky.longitude = parseFloat($('#'+id+'_long').val())
							e.data.sky.draw();
							$('#'+id+'_geo').hide();
						});
						$('#'+id+'_geo').show();
					}else $('#'+id+'_geo').toggle();
					$('#'+id+'_lat').val(e.data.sky.latitude)
					$('#'+id+'_long').val(e.data.sky.longitude)
					if(typeof e.data.sky.callback.geo=="function") e.data.sky.callback.geo.call(e.data.sky);
				});
			}
		}
	}
} 

VirtualSky.prototype.drawStars = function(){
	this.ctx.beginPath();
	this.ctx.fillStyle = (this.negative) ? "rgb(0,0,0)" : "rgb(255,255,255)";
	this.az_off = (this.az_off+360)%360;
	for(i = 0; i < this.stars.length; i++){
		var mag = this.stars[i][1];
		if(mag < this.magnitude){
			var p = this.radec2xy(this.stars[i][2], this.stars[i][3]);
			if(this.isVisible(p.el) && !isNaN(p.x)){
				d = 0.8*Math.max(3-mag/2, 0.5);
				// Modify the 'size' of the star by how close to the horizon it is
				// i.e. smaller when closer to the horizon
				if(this.gradient && this.projection != "mollweide" && this.projection != "planechart"){
					z = (90-p.el)*this.d2r;
					d *= Math.exp(-z*0.6)
				}
				this.ctx.moveTo(p.x+d,p.y);
				this.ctx.arc(p.x,p.y,d,0,Math.PI*2,true);
			}
		}	
	}
	this.ctx.fill();
}

// When provided with an array of Julian dates, ra, dec, and magnitude this will interpolate to the nearest
// data = [jd_1, ra_1, dec_1, mag_1, jd_2, ra_2, dec_2, mag_2....]
VirtualSky.prototype.interpolate = function(jd,data){
	var mindt = jd;	// Arbitrary starting value in days
	var mini = 0;	// index where we find the minimum
	for(var i = 0 ; i < data.length ; i+=4){
		// Find the nearest point to now
		var dt = (jd-data[i]);
		if(Math.abs(dt) < Math.abs(mindt)){ mindt = dt; mini = i; }
	}
	if(mindt >= 0){
		var pos_2 = mini+1+4;
		var pos_1 = mini+1;
		var fract = mindt/Math.abs(data[pos_2-1]-data[pos_1-1]);
	}else{
		var pos_2 = mini+1;
		var pos_1 = mini+1-4;
		var fract = (1+(mindt)/Math.abs(data[pos_2-1]-data[pos_1-1]));
	}
	// We don't want to attempt to find positions beyond the edges of the array
	if(pos_2 > data.length || pos_1 < 0){
		var dra = data[mini+1];
		var ddec = data[mini+2];
		var dmag = data[mini+3];
	}else{
		var dra = (Math.abs(data[pos_2]-data[pos_1]) > 180) ? (data[pos_1]+(data[pos_2]+360-data[pos_1])*fract)%360 : (data[pos_1]+(data[pos_2]-data[pos_1])*fract)%360;
		var ddec = data[pos_1+1]+(data[pos_2+1]-data[pos_1+1])*fract;
		var dmag = data[pos_1+2]+(data[pos_2+2]-data[pos_1+2])*fract;
	}
	return { ra: dra, dec:ddec, mag:dmag}
}

VirtualSky.prototype.drawPlanets = function(){

	if(this.planets.length <= 0) return;
	var oldjd = this.jd;
	var times = this.astronomicalTimes();
	this.jd = times.JD;

	for(var p = 0 ; p < this.planets.length ; p++){
		// We'll allow 2 formats here:
		// [Planet name,colour,ra,dec,mag] or [Planet name,colour,[jd_1, ra_1, dec_1, mag_1, jd_2, ra_2, dec_2, mag_2....]]
		if(this.planets[p].length == 3){
			// Find nearest JD
			if(this.planets[p][2].length%4 == 0){
				if(this.jd > this.planets[p][2][0] && this.jd < this.planets[p][2][(this.planets[p][2].length-4)]){
					var interp = this.interpolate(this.jd,this.planets[p][2]);
					var ra = interp.ra;
					var dec = interp.dec;
					var mag = interp.mag;
				}else{
					continue;	// We don't have data for this planet so skip to the next
				}
			}
		}else{
			var ra = this.planets[p][2];
			var dec = this.planets[p][3];
		}
		var pos = this.radec2xy(ra,dec);

		var colour = this.planets[p][1];
		if(this.negative) colour = 'rgb(150,150,150)';

		if(this.showplanets && this.isVisible(pos.el) && mag < this.magnitude){
			var d = 0;
			if(typeof mag!="undefined"){
				d = 0.8*Math.max(3-mag/2, 0.5);
				if(this.gradient && this.projection != "mollweide" && this.projection != "planechart"){
					z = (90-pos.el)*this.d2r;
					d *= Math.exp(-z*0.6)
				}
			}
			if(d < 1.5) d = 1.5;
			this.drawPlanet(pos.x,pos.y,d,colour,this.planets[p][0]);
		}
		if(this.showorbits && this.isVisible(pos.el) && mag < this.magnitude){
			this.ctx.beginPath();
			this.ctx.lineWidth = 0.5
			var fontsize = 12;
			this.ctx.font = fontsize+"px Helvetica";
			this.ctx.strokeStyle = this.planets[p][1];
			this.ctx.lineWidth = 1;
			var previous = {x:0,y:0,el:0};
			for(i = 0 ; i < this.planets[p][2].length-4 ; i+=4){
				var point = this.radec2xy(this.planets[p][2][i+1], this.planets[p][2][i+2]);
				if(previous.x > 0 && previous.y > 0 && this.isVisible(point.el)){
					this.ctx.moveTo(previous.x,previous.y);
					// Basic error checking: points behind us often have very long lines so we'll zap them
					if(Math.abs(point.x-previous.x) < this.wide/3){
						this.ctx.lineTo(point.x,point.y);
					}
				}
				previous = point;
			}
			this.ctx.stroke();
		}
	}
	
	// Moon
	if(this.showplanets){
		// Only recalculate the Moon's ecliptic position if the time has changed
		if(oldjd != this.jd){
			var p = this.moonPos(this.jd);
			this.moon = p.moon;
			this.sun = p.sun;
		}
		var pos;
		// We don't have the planets structure but we can recover the Sun
		if(typeof this.planets=="string"){
			pos = this.ecliptic2xy(this.sun.lon,this.sun.lat,times.LST);
			if(this.isVisible(pos.el)) this.drawPlanet(pos.x,pos.y,5,'rgb(255,215,0)',"Sun");
		}
		pos = this.ecliptic2xy(this.moon.lon,this.moon.lat,times.LST);
		// Draw Moon last as it is closest
		if(this.isVisible(pos.el)) this.drawPlanet(pos.x,pos.y,5,'rgb(150,150,150)',"Moon");

	}
}

VirtualSky.prototype.drawPlanet = function(x,y,d,colour,label){
	this.ctx.beginPath(); 
	this.ctx.fillStyle = colour;
	this.ctx.strokeStyle = colour;
	this.ctx.moveTo(x+d,y+d);
	this.ctx.arc(x,y,d,0,Math.PI*2,true);
	this.ctx.font = "12px Helvetica";
	this.ctx.lineWidth = 1.5;
	xoff = d + 2;
	if(this.projection == "polar" && this.ctx.measureText) xoff = -this.ctx.measureText(label).width-3
	if(this.projection == "polar" && x < this.wide/2) xoff = d;
	this.ctx.fillText(label,x+xoff,y-(d+2))
	this.ctx.fill();
}

VirtualSky.prototype.drawConstellationLines = function(colour){
	if(!colour) colour = (this.negative) ? "rgb(0,0,0)" : "rgba(200,200,255,1)";
	this.ctx.beginPath();
	this.ctx.strokeStyle = colour;
	this.ctx.fillStyle = colour;
	this.ctx.lineWidth = 0.75
	var fontsize = 12;
	this.ctx.font = fontsize+"px Helvetica";
	for(c = 0; c < this.lines.length; c++){
		if(this.constellations){
			for(l = 3; l < this.lines[c].length; l+=2){
				var a = -1;
				var b = -1;
				if(!this.hipparcos[this.lines[c][l]]){
					for(s = 0; s < this.stars.length; s++){
						if(this.stars[s][0] == this.lines[c][l]){
							this.hipparcos[this.lines[c][l]] = s;
							break;
						}
					}
				}
				if(!this.hipparcos[this.lines[c][l+1]]){
					for(s = 0; s < this.stars.length; s++){
						if(this.stars[s][0] == this.lines[c][l+1]){
							this.hipparcos[this.lines[c][l+1]] = s;
							break;
						}
					}
				}
				a = this.hipparcos[this.lines[c][l]];
				b = this.hipparcos[this.lines[c][l+1]];
				if(a > 0 && b > 0 && a < this.stars.length && b < this.stars.length){
					posa = this.radec2xy(this.stars[a][2], this.stars[a][3]);
					posb = this.radec2xy(this.stars[b][2], this.stars[b][3]);
					if(this.isVisible(posa.el) && this.isVisible(posb.el)){
						// Basic error checking: constellations behind us often have very long lines so we'll zap them
						if(Math.abs(posa.x-posb.x) < this.tall/3){
							this.ctx.moveTo(posa.x,posa.y);
							this.ctx.lineTo(posb.x,posb.y);
						}
					}
				}
			}
		}
		if(this.constellationlabels){
			pos = this.radec2xy(this.lines[c][1],this.lines[c][2]);
			if(this.isVisible(pos.el)){
				xoff = (this.ctx.measureText) ? -this.ctx.measureText(this.lines[c][0]).width/2 : 0;
				this.ctx.fillText(this.lines[c][0],pos.x+xoff,pos.y-fontsize/2)
				this.ctx.fill();
			}
		}
	}
	this.ctx.stroke();		
}

// type can be "az" or "eq"
VirtualSky.prototype.drawGridlines = function(type,step,colour){
	if(!type) return;
	az = (type=="az");
	if(!colour || typeof colour!="string") colour = (az) ? "rgba(100,100,255,0.4)" : "rgba(255,100,100,0.4)";
	if(!step || typeof step!="number") step = this.gridstep;
	var a = 0;
	var b = 0;
	var oldx = 0;
	var oldy = 0;
	this.ctx.beginPath(); 
	this.ctx.strokeStyle = colour;
	this.ctx.lineWidth = 1.0;
	var bstep = 2;
	if(az){
		var maxb = (this.projection == "equirectangular") ? 90 : 90-bstep;
		var minb = 0;
	}else{
		var maxb = 90-bstep;
		var minb = -maxb;
	}
	for(a = 0 ; a < 360 ; a += step){
		moved = false;
		for(b = minb; b <= maxb ; b+= bstep){
			pos = (az) ? this.azel2xy(a-this.az_off,b,this.wide,this.tall) : this.radec2xy(a,b);
			x = pos.x;
			y = pos.y;
			show = (az) ? true: ((this.isVisible(pos.el)) ? true : false);
			if(show){
				if(isFinite(x) && isFinite(y)){
					if(az){
						if(b == 0) this.ctx.moveTo(x,y);
						else this.ctx.lineTo(x,y);
					}else{
						if(!moved || Math.abs(oldx-x) > this.wide/2){
							this.ctx.moveTo(x,y);
							moved = true;
						}else{
							this.ctx.lineTo(x,y);
						}
					}
				}
				oldx = x;
				oldy = y;
			}
		}
	}
	this.ctx.stroke();
	this.ctx.beginPath(); 
	if(az){
		minb = 0;
		maxb = 90-bstep;
	}else{
		minb = -90+step;
		maxb = 90;
	}
	for(b = minb; b < maxb ; b+= step){
		moved = false;
		for(a = 0 ; a <= 360 ; a += bstep){
			pos = (az) ? this.azel2xy(a-this.az_off,b,this.wide,this.tall) : this.radec2xy(a,b);
			x = pos.x;
			y = pos.y;
			show = (az) ? true: ((this.isVisible(pos.el)) ? true : false);
			if(show){
				if(isFinite(x) && isFinite(y)){
					if(az){
						if(a == 0) this.ctx.moveTo(x,y);
						this.ctx.lineTo(x,y);
					}else{
						// If the last point on this contour is more than a canvas width away
						// it is probably supposed to be behind us so we won't draw a line 
						if(!moved || Math.abs(oldx-x) > this.tall/4 || Math.abs(oldy-y) > this.tall/4){
							this.ctx.moveTo(x,y);
							moved = true;
						}else{
							this.ctx.lineTo(x,y);
						}
						oldx = x;
						oldy = y;
					}
				}
			}
		}
	}
	this.ctx.stroke();
}

VirtualSky.prototype.drawCardinalPoints = function(){
	var azs = new Array(0,90,180,270);
	var dirs = new Array('N','E','S','W');
	var pt = 15;
	this.ctx.beginPath();
	this.ctx.fillStyle = (this.negative) ? "rgb(0,0,0)" : "rgba(163,228,255, 1)";
	for(var i  = 0 ; i < azs.length ; i++){
		fontsize = pt/Math.pow(dirs[i].length,0.8);
		this.ctx.font = fontsize+"px Helvetica";

		if(this.projection == "polar"){
			if(this.ctx.measureText){
				var metrics = this.ctx.measureText(dirs[i]);
				var r = (metrics.width > fontsize) ? metrics.width/2 : fontsize/2;
			}else{
				var r = fontsize/2;
			}
			var theta = (azs[i]-this.az_off)*Math.PI/180;
			var x = -((this.tall/2) - r*1.5)*Math.sin(theta);
			var y = -((this.tall/2) - r*1.5)*Math.cos(theta);
			x = isFinite(x) ? this.wide/2 + x - r : 0;
			y = isFinite(y) ? this.tall/2 + y + r: 0;
		}else{
			pos = this.azel2xy(azs[i]-this.az_off,0,this.wide,this.tall);
			var x = isFinite(pos.x) ? pos.x - pt/2 : 0;
			var y = isFinite(pos.y) ? pos.y - pt/2 : 0;
			if(x < 0 || x > this.wide-pt) x = -pt;
			var ang = (azs[i]-this.az_off)*Math.PI/180;
		}
		this.ctx.fillText(dirs[i],x,y);
	}
	this.ctx.fill();
}

// Assume decimal Ra/Dec
VirtualSky.prototype.highlight = function(i,colour){
	if(this.pointers[i].ra && this.pointers[i].dec){
		colour = (this.pointers[i].colour) ? this.pointers[i].colour : ((colour) ? colour : "rgba(255,0,0,1)");
		if(this.negative) colour = this.negativeColour(colour);
		var pos = this.radec2xy(this.pointers[i].ra, this.pointers[i].dec);
		if(this.isVisible(pos.el)){
			this.pointers[i].az = pos.az;
			this.pointers[i].el = pos.el;
			this.pointers[i].x = pos.x;
			this.pointers[i].y = pos.y;
			this.pointers[i].d = 5;
			this.ctx.fillStyle = colour;
			this.ctx.strokeStyle = colour;
			this.ctx.beginPath(); 
			this.ctx.fillRect(this.pointers[i].x-d/2,this.pointers[i].y-d/2,5,5);
			this.ctx.font = "10px Helvetica";
			this.ctx.lineWidth = 1.5;
			this.ctx.fill();
			this.ctx.fillText(this.pointers[i].label,this.pointers[i].x+this.pointers[i].d*1.4,this.pointers[i].y+this.pointers[i].d*0.7)
		}
	}
}

// Expects a latitude,longitude string (comma separated)
VirtualSky.prototype.setGeo = function(pos){
	pos = pos.split(',');
	this.latitude = pos[0];
	this.longitude = pos[1];
}

VirtualSky.prototype.liveSky = function(pos){
	this.islive = !this.islive;
	if(this.islive) interval = setInterval(function(sky){ sky.setClock('now'); },1000,this);
	else{
		if(typeof interval!="undefined") clearInterval(interval);
	}
}

// Increment the clock by the amount specified
VirtualSky.prototype.advanceTime = function(by,wait){
	if(!wait) wait = 50;
	if(typeof by=="undefined"){
		this.clock = new Date();
	}else{
		this.setClock(parseFloat(by));
		timer_time = setTimeout(function(mysky,by,wait){ mysky.advanceTime(by,wait); },wait,this,by,wait);
	}
}

VirtualSky.prototype.setClock = function(seconds){
	if(typeof seconds=="string" && seconds=='now') this.clock = new Date();
	else this.clock = new Date(this.clock.getTime() + seconds*1000);
	this.draw();
}

VirtualSky.prototype.toggleAtmosphere = function(){ this.gradient = !this.gradient; this.draw(); }
VirtualSky.prototype.toggleNegative = function(){ this.negative = !this.negative; this.draw(); }
VirtualSky.prototype.toggleConstellationLines = function(){ this.constellations = !this.constellations; this.draw(); }
VirtualSky.prototype.toggleCardinalPoints = function(){ this.cardinalpoints = !this.cardinalpoints; this.draw(); }
VirtualSky.prototype.toggleGridlinesAzimuthal = function(){ this.gridlines_az = !this.gridlines_az; this.draw(); }
VirtualSky.prototype.toggleGround = function(){ this.ground = !this.ground; this.draw(); }
VirtualSky.prototype.togglePlanetHints = function(){ this.showplanets = !this.showplanets; this.draw(); }
VirtualSky.prototype.toggleOrbits = function(){ this.showorbits = !this.showorbits; this.draw(); }
VirtualSky.prototype.toggleConstellationLabels = function(){ this.constellationlabels = !this.constellationlabels; this.draw(); }
VirtualSky.prototype.toggleGridlinesEquatorial = function(){ this.gridlines_eq = !this.gridlines_eq; this.draw(); }

VirtualSky.prototype.addPointer = function(input){
	// Check if we've already added this
	var matched = -1;
	for(var i = 0 ; i < this.pointers.length ; i++){
		if(this.pointers[i].ra == input.ra && this.pointers[i].dec == input.dec && this.pointers[i].label == input.label) matched = i;
	}
	// Hasn't been added already
	if(matched < 0){
		input.ra *= 1;	// Correct for a bug
		input.dec *= 1;
		this.pointers[this.pointers.length] = input;
	}
	return (this.pointers.length);
}

VirtualSky.prototype.toggleAzimuthMove = function(az){
	if(this.az_step == 0){
		this.az_step = (typeof az=="number") ? az : -1;
		this.moveIt();
	}else{
		this.az_step = 0;
		if(typeof timer_az!="undefined") clearTimeout(timer_az)
	}
}

VirtualSky.prototype.moveIt = function(){
	// Send 'this' context to the setTimeout function so we can redraw
	timer_az = setTimeout(function(mysky){ mysky.az_off += mysky.az_step; mysky.draw(); mysky.moveIt(); },100,this)
}

VirtualSky.prototype.spinIt = function(tick,wait){
	if(typeof tick == "number") this.spin = (tick == 0) ? 0 : (this.spin+tick);
	else{
		if(this.spin == 0) this.spin = (tick == "up") ? 2 : -2;
		else{
			if(this.spin > 0) this.spin = (tick == "up") ? (this.spin*2) : (this.spin/2);
			else if(this.spin < 0) this.spin = (tick == "up") ? (this.spin/2) : (this.spin*2);
			if(this.spin < 2 && this.spin > -2) this.spin = 0;
		}
	}
	if(typeof timer_time!="undefined") clearTimeout(timer_time)
	if(this.spin != 0) this.advanceTime(this.spin,wait);
}

VirtualSky.prototype.getOffset = function(el){
	var _x = 0;
	var _y = 0;
	while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
		_x += el.offsetLeft - el.scrollLeft;
		_y += el.offsetTop - el.scrollTop;
		el = el.parentNode;
	}
	return { top: _y, left: _x };
}

VirtualSky.prototype.getJD = function() {
	// The Julian Date of the Unix Time epoch is 2440587.5
	today = this.clock;
	return ( today.getTime() / 86400000.0 ) + 2440587.5;
}

VirtualSky.prototype.negativeColour = function(colour){
	var end = (colour.indexOf("rgb") == 0) ? (colour.lastIndexOf(")")) :  0;
	if(end == 0) return colour;
	var rgb = colour.substring(colour.indexOf("(")+1,end).split(",");
	return (rgb.length==3) ? ('rgb('+(255-rgb[0])+','+(255-rgb[1])+','+(255-rgb[2])+')') : ('rgba('+(255-rgb[0])+','+(255-rgb[1])+','+(255-rgb[2])+','+(rgb[3])+')');
}


